
Day08_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b20  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08001cb0  08001cb0  00002cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ea4  08001ea4  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  08001ea4  08001ea4  00002ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001eac  08001eac  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001eac  08001eac  00002eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001eb0  08001eb0  00002eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001eb4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000168  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001509  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000071b  00000000  00000000  00004587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00004ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fb  00000000  00000000  00004e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019433  00000000  00000000  00004f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001fcf  00000000  00000000  0001e34e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bdb9  00000000  00000000  0002031d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ac0d6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c48  00000000  00000000  000ac11c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000acd64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004f  00000000  00000000  000acd83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001c98 	.word	0x08001c98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001c98 	.word	0x08001c98

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <EEPROM_Init>:
 */


#include "eeprom.h"

void EEPROM_Init(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	int ret;
	I2CInit();
 8000286:	f000 f965 	bl	8000554 <I2CInit>
	// optional -- check if eeprom is present
	I2CStart();
 800028a:	f000 f8a3 	bl	80003d4 <I2CStart>
	ret = I2CIsDeviceReady(EEPROM_W);
 800028e:	20a0      	movs	r0, #160	@ 0xa0
 8000290:	f000 f942 	bl	8000518 <I2CIsDeviceReady>
 8000294:	6078      	str	r0, [r7, #4]
	// if ret=0, eeprom not avail; otherwise, eeprom is avail.
	I2CStop();
 8000296:	f000 f8b9 	bl	800040c <I2CStop>
}
 800029a:	bf00      	nop
 800029c:	3708      	adds	r7, #8
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}

080002a2 <EEPROM_Write>:

void EEPROM_Write(uint16_t addr, uint8_t byte[], uint8_t n) {
 80002a2:	b580      	push	{r7, lr}
 80002a4:	b084      	sub	sp, #16
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	4603      	mov	r3, r0
 80002aa:	6039      	str	r1, [r7, #0]
 80002ac:	80fb      	strh	r3, [r7, #6]
 80002ae:	4613      	mov	r3, r2
 80002b0:	717b      	strb	r3, [r7, #5]
	uint8_t high = addr >> 8, low = addr & 0xFF;
 80002b2:	88fb      	ldrh	r3, [r7, #6]
 80002b4:	0a1b      	lsrs	r3, r3, #8
 80002b6:	b29b      	uxth	r3, r3
 80002b8:	72fb      	strb	r3, [r7, #11]
 80002ba:	88fb      	ldrh	r3, [r7, #6]
 80002bc:	72bb      	strb	r3, [r7, #10]
	I2CStart();
 80002be:	f000 f889 	bl	80003d4 <I2CStart>
	I2CSendSlaveAddress(EEPROM_W);
 80002c2:	20a0      	movs	r0, #160	@ 0xa0
 80002c4:	f000 f8b8 	bl	8000438 <I2CSendSlaveAddress>
	I2CSendData(high);
 80002c8:	7afb      	ldrb	r3, [r7, #11]
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f8ce 	bl	800046c <I2CSendData>
	I2CSendData(low);
 80002d0:	7abb      	ldrb	r3, [r7, #10]
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 f8ca 	bl	800046c <I2CSendData>
	for(int i=0; i<n; i++)
 80002d8:	2300      	movs	r3, #0
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	e009      	b.n	80002f2 <EEPROM_Write+0x50>
		I2CSendData(byte[i]);
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	683a      	ldr	r2, [r7, #0]
 80002e2:	4413      	add	r3, r2
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 f8c0 	bl	800046c <I2CSendData>
	for(int i=0; i<n; i++)
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	3301      	adds	r3, #1
 80002f0:	60fb      	str	r3, [r7, #12]
 80002f2:	797b      	ldrb	r3, [r7, #5]
 80002f4:	68fa      	ldr	r2, [r7, #12]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	dbf1      	blt.n	80002de <EEPROM_Write+0x3c>
	I2CStop();
 80002fa:	f000 f887 	bl	800040c <I2CStop>
}
 80002fe:	bf00      	nop
 8000300:	3710      	adds	r7, #16
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}

08000306 <EEPROM_Read>:

void EEPROM_Read(uint16_t addr, uint8_t byte[], uint8_t n) {
 8000306:	b590      	push	{r4, r7, lr}
 8000308:	b085      	sub	sp, #20
 800030a:	af00      	add	r7, sp, #0
 800030c:	4603      	mov	r3, r0
 800030e:	6039      	str	r1, [r7, #0]
 8000310:	80fb      	strh	r3, [r7, #6]
 8000312:	4613      	mov	r3, r2
 8000314:	717b      	strb	r3, [r7, #5]
	int i;
	uint8_t high = addr >> 8, low = addr & 0xFF;
 8000316:	88fb      	ldrh	r3, [r7, #6]
 8000318:	0a1b      	lsrs	r3, r3, #8
 800031a:	b29b      	uxth	r3, r3
 800031c:	72fb      	strb	r3, [r7, #11]
 800031e:	88fb      	ldrh	r3, [r7, #6]
 8000320:	72bb      	strb	r3, [r7, #10]
	I2CStart();
 8000322:	f000 f857 	bl	80003d4 <I2CStart>
	I2CSendSlaveAddress(EEPROM_W);
 8000326:	20a0      	movs	r0, #160	@ 0xa0
 8000328:	f000 f886 	bl	8000438 <I2CSendSlaveAddress>
	I2CSendData(high);
 800032c:	7afb      	ldrb	r3, [r7, #11]
 800032e:	4618      	mov	r0, r3
 8000330:	f000 f89c 	bl	800046c <I2CSendData>
	I2CSendData(low);
 8000334:	7abb      	ldrb	r3, [r7, #10]
 8000336:	4618      	mov	r0, r3
 8000338:	f000 f898 	bl	800046c <I2CSendData>
	I2CRepeatStart();
 800033c:	f000 f860 	bl	8000400 <I2CRepeatStart>
	I2CSendSlaveAddress(EEPROM_R);
 8000340:	20a1      	movs	r0, #161	@ 0xa1
 8000342:	f000 f879 	bl	8000438 <I2CSendSlaveAddress>
	for(i=0; i<n-1; i++)
 8000346:	2300      	movs	r3, #0
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e009      	b.n	8000360 <EEPROM_Read+0x5a>
		byte[i] = I2CRecvDataAck();
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	683a      	ldr	r2, [r7, #0]
 8000350:	18d4      	adds	r4, r2, r3
 8000352:	f000 f8a9 	bl	80004a8 <I2CRecvDataAck>
 8000356:	4603      	mov	r3, r0
 8000358:	7023      	strb	r3, [r4, #0]
	for(i=0; i<n-1; i++)
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	3301      	adds	r3, #1
 800035e:	60fb      	str	r3, [r7, #12]
 8000360:	797b      	ldrb	r3, [r7, #5]
 8000362:	3b01      	subs	r3, #1
 8000364:	68fa      	ldr	r2, [r7, #12]
 8000366:	429a      	cmp	r2, r3
 8000368:	dbf0      	blt.n	800034c <EEPROM_Read+0x46>
	byte[i] = I2CRecvDataNAck();
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	683a      	ldr	r2, [r7, #0]
 800036e:	18d4      	adds	r4, r2, r3
 8000370:	f000 f8b6 	bl	80004e0 <I2CRecvDataNAck>
 8000374:	4603      	mov	r3, r0
 8000376:	7023      	strb	r3, [r4, #0]
	I2CStop();
 8000378:	f000 f848 	bl	800040c <I2CStop>
}
 800037c:	bf00      	nop
 800037e:	3714      	adds	r7, #20
 8000380:	46bd      	mov	sp, r7
 8000382:	bd90      	pop	{r4, r7, pc}

08000384 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000384:	b480      	push	{r7}
 8000386:	b085      	sub	sp, #20
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 800038c:	4b0e      	ldr	r3, [pc, #56]	@ (80003c8 <DelayMs+0x44>)
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000392:	4b0e      	ldr	r3, [pc, #56]	@ (80003cc <DelayMs+0x48>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4a0e      	ldr	r2, [pc, #56]	@ (80003d0 <DelayMs+0x4c>)
 8000398:	fba2 2303 	umull	r2, r3, r2, r3
 800039c:	099b      	lsrs	r3, r3, #6
 800039e:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	68ba      	ldr	r2, [r7, #8]
 80003a4:	fb02 f303 	mul.w	r3, r2, r3
 80003a8:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80003aa:	bf00      	nop
 80003ac:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <DelayMs+0x44>)
 80003ae:	685a      	ldr	r2, [r3, #4]
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	1ad2      	subs	r2, r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	429a      	cmp	r2, r3
 80003b8:	d3f8      	bcc.n	80003ac <DelayMs+0x28>
}
 80003ba:	bf00      	nop
 80003bc:	bf00      	nop
 80003be:	3714      	adds	r7, #20
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	e0001000 	.word	0xe0001000
 80003cc:	20000000 	.word	0x20000000
 80003d0:	10624dd3 	.word	0x10624dd3

080003d4 <I2CStart>:
 */


#include "i2c.h"

void I2CStart() {
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 80003d8:	4b08      	ldr	r3, [pc, #32]	@ (80003fc <I2CStart+0x28>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a07      	ldr	r2, [pc, #28]	@ (80003fc <I2CStart+0x28>)
 80003de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003e2:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 80003e4:	bf00      	nop
 80003e6:	4b05      	ldr	r3, [pc, #20]	@ (80003fc <I2CStart+0x28>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d0f9      	beq.n	80003e6 <I2CStart+0x12>
}
 80003f2:	bf00      	nop
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	40005400 	.word	0x40005400

08000400 <I2CRepeatStart>:

void I2CRepeatStart() {
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	I2CStart();
 8000404:	f7ff ffe6 	bl	80003d4 <I2CStart>
}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}

0800040c <I2CStop>:

void I2CStop() {
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 8000410:	4b08      	ldr	r3, [pc, #32]	@ (8000434 <I2CStop+0x28>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a07      	ldr	r2, [pc, #28]	@ (8000434 <I2CStop+0x28>)
 8000416:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800041a:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR2 & I2C_SR2_BUSY));
 800041c:	bf00      	nop
 800041e:	4b05      	ldr	r3, [pc, #20]	@ (8000434 <I2CStop+0x28>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	f003 0302 	and.w	r3, r3, #2
 8000426:	2b00      	cmp	r3, #0
 8000428:	d0f9      	beq.n	800041e <I2CStop+0x12>
}
 800042a:	bf00      	nop
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr
 8000434:	40005400 	.word	0x40005400

08000438 <I2CSendSlaveAddress>:

void I2CSendSlaveAddress(uint8_t slaveaddr) {
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr
    // wait until address is sent
    I2C1->DR = slaveaddr;
 8000442:	4a09      	ldr	r2, [pc, #36]	@ (8000468 <I2CSendSlaveAddress+0x30>)
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000448:	bf00      	nop
 800044a:	4b07      	ldr	r3, [pc, #28]	@ (8000468 <I2CSendSlaveAddress+0x30>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	f003 0302 	and.w	r3, r3, #2
 8000452:	2b00      	cmp	r3, #0
 8000454:	d0f9      	beq.n	800044a <I2CSendSlaveAddress+0x12>
    // dummy read to clear flags
    (void)I2C1->SR1;
 8000456:	4b04      	ldr	r3, [pc, #16]	@ (8000468 <I2CSendSlaveAddress+0x30>)
 8000458:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2; // clear addr condition
 800045a:	4b03      	ldr	r3, [pc, #12]	@ (8000468 <I2CSendSlaveAddress+0x30>)
 800045c:	699b      	ldr	r3, [r3, #24]
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	40005400 	.word	0x40005400

0800046c <I2CSendData>:

void I2CSendData(uint8_t val) {
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	4603      	mov	r3, r0
 8000474:	71fb      	strb	r3, [r7, #7]
    // send data in write mode
    // wait until address is sent
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000476:	bf00      	nop
 8000478:	4b0a      	ldr	r3, [pc, #40]	@ (80004a4 <I2CSendData+0x38>)
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000480:	2b00      	cmp	r3, #0
 8000482:	d0f9      	beq.n	8000478 <I2CSendData+0xc>
    // write dr and clear flags
    I2C1->DR = val;
 8000484:	4a07      	ldr	r2, [pc, #28]	@ (80004a4 <I2CSendData+0x38>)
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	6113      	str	r3, [r2, #16]
    // wait until data byte is transferred
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 800048a:	bf00      	nop
 800048c:	4b05      	ldr	r3, [pc, #20]	@ (80004a4 <I2CSendData+0x38>)
 800048e:	695b      	ldr	r3, [r3, #20]
 8000490:	f003 0304 	and.w	r3, r3, #4
 8000494:	2b00      	cmp	r3, #0
 8000496:	d0f9      	beq.n	800048c <I2CSendData+0x20>
}
 8000498:	bf00      	nop
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	40005400 	.word	0x40005400

080004a8 <I2CRecvDataAck>:

uint8_t I2CRecvDataAck(void) {
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
	uint8_t val;
	I2C1->CR1 |= I2C_CR1_ACK | I2C_CR1_POS;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	@ (80004dc <I2CRecvDataAck+0x34>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a0a      	ldr	r2, [pc, #40]	@ (80004dc <I2CRecvDataAck+0x34>)
 80004b4:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80004b8:	6013      	str	r3, [r2, #0]
	// wait until receive buffer is not empty
	while (!(I2C1->SR1 & I2C_SR1_RXNE));
 80004ba:	bf00      	nop
 80004bc:	4b07      	ldr	r3, [pc, #28]	@ (80004dc <I2CRecvDataAck+0x34>)
 80004be:	695b      	ldr	r3, [r3, #20]
 80004c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d0f9      	beq.n	80004bc <I2CRecvDataAck+0x14>
	// read content and clear flags
	val = (uint8_t)I2C1->DR;
 80004c8:	4b04      	ldr	r3, [pc, #16]	@ (80004dc <I2CRecvDataAck+0x34>)
 80004ca:	691b      	ldr	r3, [r3, #16]
 80004cc:	71fb      	strb	r3, [r7, #7]
	return val;
 80004ce:	79fb      	ldrb	r3, [r7, #7]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40005400 	.word	0x40005400

080004e0 <I2CRecvDataNAck>:

uint8_t I2CRecvDataNAck(void) {
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
	uint8_t val;
	I2C1->CR1 &= ~(I2C_CR1_ACK | I2C_CR1_POS);
 80004e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000514 <I2CRecvDataNAck+0x34>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000514 <I2CRecvDataNAck+0x34>)
 80004ec:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80004f0:	6013      	str	r3, [r2, #0]
	// wait until receive buffer is not empty
	while (!(I2C1->SR1 & I2C_SR1_RXNE));
 80004f2:	bf00      	nop
 80004f4:	4b07      	ldr	r3, [pc, #28]	@ (8000514 <I2CRecvDataNAck+0x34>)
 80004f6:	695b      	ldr	r3, [r3, #20]
 80004f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0f9      	beq.n	80004f4 <I2CRecvDataNAck+0x14>
	// read content and clear flags
	val = I2C1->DR;
 8000500:	4b04      	ldr	r3, [pc, #16]	@ (8000514 <I2CRecvDataNAck+0x34>)
 8000502:	691b      	ldr	r3, [r3, #16]
 8000504:	71fb      	strb	r3, [r7, #7]
	return val;
 8000506:	79fb      	ldrb	r3, [r7, #7]
}
 8000508:	4618      	mov	r0, r3
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	40005400 	.word	0x40005400

08000518 <I2CIsDeviceReady>:

int I2CIsDeviceReady(uint8_t slaveaddr) {
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr of write
	slaveaddr &= ~BV(0);
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	f023 0301 	bic.w	r3, r3, #1
 8000528:	71fb      	strb	r3, [r7, #7]
    // wait until address is sent
    I2C1->DR = slaveaddr;
 800052a:	4a09      	ldr	r2, [pc, #36]	@ (8000550 <I2CIsDeviceReady+0x38>)
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000530:	bf00      	nop
 8000532:	4b07      	ldr	r3, [pc, #28]	@ (8000550 <I2CIsDeviceReady+0x38>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f003 0302 	and.w	r3, r3, #2
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0f9      	beq.n	8000532 <I2CIsDeviceReady+0x1a>
    // dummy read to clear flags
    (void)I2C1->SR2; // clear addr condition
 800053e:	4b04      	ldr	r3, [pc, #16]	@ (8000550 <I2CIsDeviceReady+0x38>)
 8000540:	699b      	ldr	r3, [r3, #24]
	return 1;
 8000542:	2301      	movs	r3, #1
}
 8000544:	4618      	mov	r0, r3
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40005400 	.word	0x40005400

08000554 <I2CInit>:

void I2CInit() {
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
    // enable GPIOB clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000558:	4b43      	ldr	r3, [pc, #268]	@ (8000668 <I2CInit+0x114>)
 800055a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055c:	4a42      	ldr	r2, [pc, #264]	@ (8000668 <I2CInit+0x114>)
 800055e:	f043 0302 	orr.w	r3, r3, #2
 8000562:	6313      	str	r3, [r2, #48]	@ 0x30
	DelayMs(50);
 8000564:	2032      	movs	r0, #50	@ 0x32
 8000566:	f7ff ff0d 	bl	8000384 <DelayMs>

    // setup I2C pins
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800056a:	4b3f      	ldr	r3, [pc, #252]	@ (8000668 <I2CInit+0x114>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a3e      	ldr	r2, [pc, #248]	@ (8000668 <I2CInit+0x114>)
 8000570:	f043 0302 	orr.w	r3, r3, #2
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB->MODER &= ~(3U << I2C1_SCL*2); // PB6
 8000576:	4b3d      	ldr	r3, [pc, #244]	@ (800066c <I2CInit+0x118>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a3c      	ldr	r2, [pc, #240]	@ (800066c <I2CInit+0x118>)
 800057c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000580:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << I2C1_SCL*2); // AF
 8000582:	4b3a      	ldr	r3, [pc, #232]	@ (800066c <I2CInit+0x118>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a39      	ldr	r2, [pc, #228]	@ (800066c <I2CInit+0x118>)
 8000588:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800058c:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << I2C1_SCL);   // open-drain
 800058e:	4b37      	ldr	r3, [pc, #220]	@ (800066c <I2CInit+0x118>)
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	4a36      	ldr	r2, [pc, #216]	@ (800066c <I2CInit+0x118>)
 8000594:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000598:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3U << I2C1_SCL*2); // no pull-up/down
 800059a:	4b34      	ldr	r3, [pc, #208]	@ (800066c <I2CInit+0x118>)
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	4a33      	ldr	r2, [pc, #204]	@ (800066c <I2CInit+0x118>)
 80005a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80005a4:	60d3      	str	r3, [r2, #12]
    GPIOB->MODER &= ~(3U << I2C1_SDA*2); // PB7
 80005a6:	4b31      	ldr	r3, [pc, #196]	@ (800066c <I2CInit+0x118>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a30      	ldr	r2, [pc, #192]	@ (800066c <I2CInit+0x118>)
 80005ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005b0:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << I2C1_SDA*2); // AF
 80005b2:	4b2e      	ldr	r3, [pc, #184]	@ (800066c <I2CInit+0x118>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a2d      	ldr	r2, [pc, #180]	@ (800066c <I2CInit+0x118>)
 80005b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005bc:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << I2C1_SDA);   // open-drain
 80005be:	4b2b      	ldr	r3, [pc, #172]	@ (800066c <I2CInit+0x118>)
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	4a2a      	ldr	r2, [pc, #168]	@ (800066c <I2CInit+0x118>)
 80005c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005c8:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3U << I2C1_SDA*2); // no pull-up/down
 80005ca:	4b28      	ldr	r3, [pc, #160]	@ (800066c <I2CInit+0x118>)
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	4a27      	ldr	r2, [pc, #156]	@ (800066c <I2CInit+0x118>)
 80005d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005d4:	60d3      	str	r3, [r2, #12]

    // choose AF4 for I2C1 in Alternate Function registers
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL6_Pos); // for pin 6
 80005d6:	4b25      	ldr	r3, [pc, #148]	@ (800066c <I2CInit+0x118>)
 80005d8:	6a1b      	ldr	r3, [r3, #32]
 80005da:	4a24      	ldr	r2, [pc, #144]	@ (800066c <I2CInit+0x118>)
 80005dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80005e0:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL7_Pos); // for pin 7
 80005e2:	4b22      	ldr	r3, [pc, #136]	@ (800066c <I2CInit+0x118>)
 80005e4:	6a1b      	ldr	r3, [r3, #32]
 80005e6:	4a21      	ldr	r2, [pc, #132]	@ (800066c <I2CInit+0x118>)
 80005e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80005ec:	6213      	str	r3, [r2, #32]

    // enable I2C clock
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80005ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000668 <I2CInit+0x114>)
 80005f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f2:	4a1d      	ldr	r2, [pc, #116]	@ (8000668 <I2CInit+0x114>)
 80005f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005f8:	6413      	str	r3, [r2, #64]	@ 0x40
	DelayMs(50);
 80005fa:	2032      	movs	r0, #50	@ 0x32
 80005fc:	f7ff fec2 	bl	8000384 <DelayMs>
    // reset and clear reg
    I2C1->CR1 = I2C_CR1_SWRST;
 8000600:	4b1b      	ldr	r3, [pc, #108]	@ (8000670 <I2CInit+0x11c>)
 8000602:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000606:	601a      	str	r2, [r3, #0]
    I2C1->CR1 = 0;
 8000608:	4b19      	ldr	r3, [pc, #100]	@ (8000670 <I2CInit+0x11c>)
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]

    I2C1->CR2 &= ~(I2C_CR2_ITERREN); // disable error interrupt
 800060e:	4b18      	ldr	r3, [pc, #96]	@ (8000670 <I2CInit+0x11c>)
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	4a17      	ldr	r2, [pc, #92]	@ (8000670 <I2CInit+0x11c>)
 8000614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000618:	6053      	str	r3, [r2, #4]
    I2C1->CCR &= ~(1 << I2C_CCR_FS_Pos); // standard mode (100 khz)
 800061a:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <I2CInit+0x11c>)
 800061c:	69db      	ldr	r3, [r3, #28]
 800061e:	4a14      	ldr	r2, [pc, #80]	@ (8000670 <I2CInit+0x11c>)
 8000620:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000624:	61d3      	str	r3, [r2, #28]
    // Enable Ack
    I2C1->CR1 |= (1<<I2C_CR1_ACK_Pos);
 8000626:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <I2CInit+0x11c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a11      	ldr	r2, [pc, #68]	@ (8000670 <I2CInit+0x11c>)
 800062c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000630:	6013      	str	r3, [r2, #0]
    // Thigh and Tlow needs to be 5us each

    // Let's pick fPCLK1 = 16Mhz, TPCLK1 = 1/16Mhz = 62.5ns
    // Thigh = CCR * TPCLK1 => 5us = CCR * 62.5ns
    // CCR = 80
    I2C1->CR2 |= (16 << I2C_CR2_FREQ_Pos); // 16Mhz PCLK
 8000632:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <I2CInit+0x11c>)
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	4a0e      	ldr	r2, [pc, #56]	@ (8000670 <I2CInit+0x11c>)
 8000638:	f043 0310 	orr.w	r3, r3, #16
 800063c:	6053      	str	r3, [r2, #4]
    I2C1->CCR |= (80 << I2C_CCR_CCR_Pos);
 800063e:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <I2CInit+0x11c>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	4a0b      	ldr	r2, [pc, #44]	@ (8000670 <I2CInit+0x11c>)
 8000644:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000648:	61d3      	str	r3, [r2, #28]
    // Maximum rise time.
    // Calculation is (maximum_rise_time / Tpclk) + 1
    // In SM mode maximum allowed SCL rise time is 1000ns
    // For TPCLK1 = 62.5ns => (1000ns / 62.5ns) + 1 = 16 + 1 = 17
    I2C1->TRISE |= (17 << I2C_TRISE_TRISE_Pos); // program Trise to 17 for 100khz
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <I2CInit+0x11c>)
 800064c:	6a1b      	ldr	r3, [r3, #32]
 800064e:	4a08      	ldr	r2, [pc, #32]	@ (8000670 <I2CInit+0x11c>)
 8000650:	f043 0311 	orr.w	r3, r3, #17
 8000654:	6213      	str	r3, [r2, #32]
    // Enable I2C
    I2C1->CR1 |= I2C_CR1_PE;
 8000656:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <I2CInit+0x11c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a05      	ldr	r2, [pc, #20]	@ (8000670 <I2CInit+0x11c>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6013      	str	r3, [r2, #0]
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40020400 	.word	0x40020400
 8000670:	40005400 	.word	0x40005400

08000674 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	@ 0x28
 8000678:	af00      	add	r7, sp, #0
	char str[32];
	int choice;
	SystemInit();
 800067a:	f000 f893 	bl	80007a4 <SystemInit>
	UartInit(BAUD_9600);
 800067e:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8000682:	f000 f8c5 	bl	8000810 <UartInit>
	EEPROM_Init();
 8000686:	f7ff fdfb 	bl	8000280 <EEPROM_Init>
	do
	{
		UartPuts("enter choice\r\n");
 800068a:	4825      	ldr	r0, [pc, #148]	@ (8000720 <main+0xac>)
 800068c:	f000 f95a 	bl	8000944 <UartPuts>
		UartPuts("1 write a string into EEPROM at address 0x0000\r\n");
 8000690:	4824      	ldr	r0, [pc, #144]	@ (8000724 <main+0xb0>)
 8000692:	f000 f957 	bl	8000944 <UartPuts>
		UartPuts("2 read 32 bytes from from address 0x0000\r\n");
 8000696:	4824      	ldr	r0, [pc, #144]	@ (8000728 <main+0xb4>)
 8000698:	f000 f954 	bl	8000944 <UartPuts>
		UartGets(str);
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 f96b 	bl	800097c <UartGets>
		sscanf(str, "%d",&choice);
 80006a6:	1d3a      	adds	r2, r7, #4
 80006a8:	f107 0308 	add.w	r3, r7, #8
 80006ac:	491f      	ldr	r1, [pc, #124]	@ (800072c <main+0xb8>)
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f9d4 	bl	8000a5c <siscanf>
		switch(choice)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d002      	beq.n	80006c0 <main+0x4c>
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d015      	beq.n	80006ea <main+0x76>
 80006be:	e027      	b.n	8000710 <main+0x9c>
		{
			case 1 :
				sscanf(str,"enter string%s\r\n",str);
 80006c0:	f107 0208 	add.w	r2, r7, #8
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	4919      	ldr	r1, [pc, #100]	@ (8000730 <main+0xbc>)
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f9c6 	bl	8000a5c <siscanf>
	        	UartGets(str);
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 f951 	bl	800097c <UartGets>
				EEPROM_Write(0x0020, (uint8_t*)str, 32);
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	2220      	movs	r2, #32
 80006e0:	4619      	mov	r1, r3
 80006e2:	2020      	movs	r0, #32
 80006e4:	f7ff fddd 	bl	80002a2 <EEPROM_Write>
				break;
 80006e8:	e012      	b.n	8000710 <main+0x9c>
			case 2 :
				sprintf(str,"string are\r\n");
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	4911      	ldr	r1, [pc, #68]	@ (8000734 <main+0xc0>)
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 f993 	bl	8000a1c <siprintf>
				EEPROM_Read(0x0020, (uint8_t*)str, 32);
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	2220      	movs	r2, #32
 80006fc:	4619      	mov	r1, r3
 80006fe:	2020      	movs	r0, #32
 8000700:	f7ff fe01 	bl	8000306 <EEPROM_Read>
				UartPuts(str);
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	4618      	mov	r0, r3
 800070a:	f000 f91b 	bl	8000944 <UartPuts>
				break;
 800070e:	bf00      	nop
	      }
	}
		while(choice!=0);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d1b9      	bne.n	800068a <main+0x16>
		return 0;
 8000716:	2300      	movs	r3, #0

    while(1);
	return 0;
}
 8000718:	4618      	mov	r0, r3
 800071a:	3728      	adds	r7, #40	@ 0x28
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	08001cb0 	.word	0x08001cb0
 8000724:	08001cc0 	.word	0x08001cc0
 8000728:	08001cf4 	.word	0x08001cf4
 800072c:	08001d20 	.word	0x08001d20
 8000730:	08001d24 	.word	0x08001d24
 8000734:	08001d38 	.word	0x08001d38

08000738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000740:	4a14      	ldr	r2, [pc, #80]	@ (8000794 <_sbrk+0x5c>)
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <_sbrk+0x60>)
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800074c:	4b13      	ldr	r3, [pc, #76]	@ (800079c <_sbrk+0x64>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d102      	bne.n	800075a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000754:	4b11      	ldr	r3, [pc, #68]	@ (800079c <_sbrk+0x64>)
 8000756:	4a12      	ldr	r2, [pc, #72]	@ (80007a0 <_sbrk+0x68>)
 8000758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <_sbrk+0x64>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4413      	add	r3, r2
 8000762:	693a      	ldr	r2, [r7, #16]
 8000764:	429a      	cmp	r2, r3
 8000766:	d207      	bcs.n	8000778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000768:	f000 f9a4 	bl	8000ab4 <__errno>
 800076c:	4603      	mov	r3, r0
 800076e:	220c      	movs	r2, #12
 8000770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000772:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000776:	e009      	b.n	800078c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <_sbrk+0x64>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800077e:	4b07      	ldr	r3, [pc, #28]	@ (800079c <_sbrk+0x64>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	4a05      	ldr	r2, [pc, #20]	@ (800079c <_sbrk+0x64>)
 8000788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800078a:	68fb      	ldr	r3, [r7, #12]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3718      	adds	r7, #24
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20020000 	.word	0x20020000
 8000798:	00000400 	.word	0x00000400
 800079c:	20000070 	.word	0x20000070
 80007a0:	200001c0 	.word	0x200001c0

080007a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  DWT_Init();
 80007a8:	f000 f802 	bl	80007b0 <DWT_Init>
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80007b4:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <DWT_Init+0x58>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	4a13      	ldr	r2, [pc, #76]	@ (8000808 <DWT_Init+0x58>)
 80007ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80007be:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80007c0:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <DWT_Init+0x58>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	4a10      	ldr	r2, [pc, #64]	@ (8000808 <DWT_Init+0x58>)
 80007c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007ca:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <DWT_Init+0x5c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0e      	ldr	r2, [pc, #56]	@ (800080c <DWT_Init+0x5c>)
 80007d2:	f023 0301 	bic.w	r3, r3, #1
 80007d6:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <DWT_Init+0x5c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a0b      	ldr	r2, [pc, #44]	@ (800080c <DWT_Init+0x5c>)
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80007e4:	4b09      	ldr	r3, [pc, #36]	@ (800080c <DWT_Init+0x5c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80007ea:	bf00      	nop
    __ASM volatile ("NOP");
 80007ec:	bf00      	nop
    __ASM volatile ("NOP");
 80007ee:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <DWT_Init+0x5c>)
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	bf0c      	ite	eq
 80007f8:	2301      	moveq	r3, #1
 80007fa:	2300      	movne	r3, #0
 80007fc:	b2db      	uxtb	r3, r3
}
 80007fe:	4618      	mov	r0, r3
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000edf0 	.word	0xe000edf0
 800080c:	e0001000 	.word	0xe0001000

08000810 <UartInit>:

#define TX_PIN	2
#define RX_PIN	3
#define USART_ALT_FN	7

void UartInit(uint32_t baud) {
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	// UART GPIO Init -- PA.2 (Tx) and PA.3 (Rx)
	// enable clock
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 8000818:	4b31      	ldr	r3, [pc, #196]	@ (80008e0 <UartInit+0xd0>)
 800081a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081c:	4a30      	ldr	r2, [pc, #192]	@ (80008e0 <UartInit+0xd0>)
 800081e:	f043 0301 	orr.w	r3, r3, #1
 8000822:	6313      	str	r3, [r2, #48]	@ 0x30
	//	alt fn = 0111 = 7 (Uart Tx and Rx)
	GPIOA->AFR[0] |= ((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos) | (USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 8000824:	4b2f      	ldr	r3, [pc, #188]	@ (80008e4 <UartInit+0xd4>)
 8000826:	6a1b      	ldr	r3, [r3, #32]
 8000828:	4a2e      	ldr	r2, [pc, #184]	@ (80008e4 <UartInit+0xd4>)
 800082a:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800082e:	6213      	str	r3, [r2, #32]
	// 	mode=10 (alt fn), speed=00 (low), pupdr=00 (none), typer=0 (push-pull)
	GPIOA->MODER |= (BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2 + 1));
 8000830:	4b2c      	ldr	r3, [pc, #176]	@ (80008e4 <UartInit+0xd4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a2b      	ldr	r2, [pc, #172]	@ (80008e4 <UartInit+0xd4>)
 8000836:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800083a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 800083c:	4b29      	ldr	r3, [pc, #164]	@ (80008e4 <UartInit+0xd4>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a28      	ldr	r2, [pc, #160]	@ (80008e4 <UartInit+0xd4>)
 8000842:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 8000846:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000848:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <UartInit+0xd4>)
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	4a25      	ldr	r2, [pc, #148]	@ (80008e4 <UartInit+0xd4>)
 800084e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000852:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~(BV(TX_PIN * 2) | BV(TX_PIN * 2 + 1) | BV(RX_PIN * 2) | BV(RX_PIN * 2 + 1));
 8000854:	4b23      	ldr	r3, [pc, #140]	@ (80008e4 <UartInit+0xd4>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	4a22      	ldr	r2, [pc, #136]	@ (80008e4 <UartInit+0xd4>)
 800085a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800085e:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER &= ~(BV(TX_PIN) | BV(RX_PIN));
 8000860:	4b20      	ldr	r3, [pc, #128]	@ (80008e4 <UartInit+0xd4>)
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	4a1f      	ldr	r2, [pc, #124]	@ (80008e4 <UartInit+0xd4>)
 8000866:	f023 030c 	bic.w	r3, r3, #12
 800086a:	6053      	str	r3, [r2, #4]

	// UART Config
	// enable uart clock
	RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 800086c:	4b1c      	ldr	r3, [pc, #112]	@ (80008e0 <UartInit+0xd0>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000870:	4a1b      	ldr	r2, [pc, #108]	@ (80008e0 <UartInit+0xd0>)
 8000872:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000876:	6413      	str	r3, [r2, #64]	@ 0x40
	// tx en (TE=1), rx en (RE=1), wordlen=8 (M=0), OVER8=0, disable parity (PCE=0)
	USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 8000878:	4b1b      	ldr	r3, [pc, #108]	@ (80008e8 <UartInit+0xd8>)
 800087a:	220c      	movs	r2, #12
 800087c:	60da      	str	r2, [r3, #12]
	// 1 stop bit (STOP=00), disable clock (CLKEN=0)
	USART2->CR2 = 0x00000000;
 800087e:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <UartInit+0xd8>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
	// no hw control, no irda, no dma, no interupts
	USART2->CR3 = 0x00000000;
 8000884:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <UartInit+0xd8>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
	// set BRR for given baud rate
	switch(baud) {
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000890:	d016      	beq.n	80008c0 <UartInit+0xb0>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000898:	d816      	bhi.n	80008c8 <UartInit+0xb8>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 80008a0:	d004      	beq.n	80008ac <UartInit+0x9c>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 80008a8:	d005      	beq.n	80008b6 <UartInit+0xa6>
 80008aa:	e00d      	b.n	80008c8 <UartInit+0xb8>
		case BAUD_9600:
			USART2->BRR = BAUD_BRR_9600;
 80008ac:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <UartInit+0xd8>)
 80008ae:	f240 6283 	movw	r2, #1667	@ 0x683
 80008b2:	609a      	str	r2, [r3, #8]
			break;
 80008b4:	e008      	b.n	80008c8 <UartInit+0xb8>
		case BAUD_38400:
			USART2->BRR = BAUD_BRR_38400;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <UartInit+0xd8>)
 80008b8:	f240 12a1 	movw	r2, #417	@ 0x1a1
 80008bc:	609a      	str	r2, [r3, #8]
			break;
 80008be:	e003      	b.n	80008c8 <UartInit+0xb8>
		case BAUD_115200:
			USART2->BRR = BAUD_BRR_115200;
 80008c0:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <UartInit+0xd8>)
 80008c2:	228b      	movs	r2, #139	@ 0x8b
 80008c4:	609a      	str	r2, [r3, #8]
			break;
 80008c6:	bf00      	nop
	}
	// uart enable (UE=1)
	USART2->CR1 |= BV(USART_CR1_UE_Pos);
 80008c8:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <UartInit+0xd8>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	4a06      	ldr	r2, [pc, #24]	@ (80008e8 <UartInit+0xd8>)
 80008ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008d2:	60d3      	str	r3, [r2, #12]
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020000 	.word	0x40020000
 80008e8:	40004400 	.word	0x40004400

080008ec <UartPutch>:

void UartPutch(uint8_t ch) {
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
	// wait until TDR is empty (i.e. prev byte transmitted)
	while((USART2->SR & BV(USART_SR_TXE_Pos)) == 0)
 80008f6:	bf00      	nop
 80008f8:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <UartPutch+0x28>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000900:	2b00      	cmp	r3, #0
 8000902:	d0f9      	beq.n	80008f8 <UartPutch+0xc>
		;
	// write new byte in TDR
	USART2->DR = ch;
 8000904:	4a03      	ldr	r2, [pc, #12]	@ (8000914 <UartPutch+0x28>)
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	6053      	str	r3, [r2, #4]
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr
 8000914:	40004400 	.word	0x40004400

08000918 <UartGetch>:

uint8_t UartGetch(void) {
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
	// wait until RDR is not empty (i.e. new byte received)
	while((USART2->SR & BV(USART_SR_RXNE_Pos)) == 0)
 800091e:	bf00      	nop
 8000920:	4b07      	ldr	r3, [pc, #28]	@ (8000940 <UartGetch+0x28>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f003 0320 	and.w	r3, r3, #32
 8000928:	2b00      	cmp	r3, #0
 800092a:	d0f9      	beq.n	8000920 <UartGetch+0x8>
		;
	// read received byte from RDR
	char ch = USART2->DR;
 800092c:	4b04      	ldr	r3, [pc, #16]	@ (8000940 <UartGetch+0x28>)
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	71fb      	strb	r3, [r7, #7]
	return ch;
 8000932:	79fb      	ldrb	r3, [r7, #7]
}
 8000934:	4618      	mov	r0, r3
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40004400 	.word	0x40004400

08000944 <UartPuts>:

void UartPuts(char str[]) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0; str[i]!='\0'; i++)
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	e009      	b.n	8000966 <UartPuts+0x22>
		UartPutch(str[i]);
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	4413      	add	r3, r2
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ffc6 	bl	80008ec <UartPutch>
	for(i=0; str[i]!='\0'; i++)
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	3301      	adds	r3, #1
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	4413      	add	r3, r2
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d1ef      	bne.n	8000952 <UartPuts+0xe>
}
 8000972:	bf00      	nop
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <UartGets>:

void UartGets(char str[]) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	int i=0;
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
	char ch;
	do {
		ch = UartGetch();
 8000988:	f7ff ffc6 	bl	8000918 <UartGetch>
 800098c:	4603      	mov	r3, r0
 800098e:	72fb      	strb	r3, [r7, #11]
		str[i] = ch;
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	7afa      	ldrb	r2, [r7, #11]
 8000998:	701a      	strb	r2, [r3, #0]
		i++;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	3301      	adds	r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
	} while(ch != '\r');
 80009a0:	7afb      	ldrb	r3, [r7, #11]
 80009a2:	2b0d      	cmp	r3, #13
 80009a4:	d1f0      	bne.n	8000988 <UartGets+0xc>
	str[i] = '\n';
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	687a      	ldr	r2, [r7, #4]
 80009aa:	4413      	add	r3, r2
 80009ac:	220a      	movs	r2, #10
 80009ae:	701a      	strb	r2, [r3, #0]
	i++;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	3301      	adds	r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]
	str[i] = '\0';
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	4413      	add	r3, r2
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]
}
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009c8:	480d      	ldr	r0, [pc, #52]	@ (8000a00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009cc:	f7ff feea 	bl	80007a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009d0:	480c      	ldr	r0, [pc, #48]	@ (8000a04 <LoopForever+0x6>)
  ldr r1, =_edata
 80009d2:	490d      	ldr	r1, [pc, #52]	@ (8000a08 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009d4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a0c <LoopForever+0xe>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d8:	e002      	b.n	80009e0 <LoopCopyDataInit>

080009da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009de:	3304      	adds	r3, #4

080009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e4:	d3f9      	bcc.n	80009da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a10 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000a14 <LoopForever+0x16>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ec:	e001      	b.n	80009f2 <LoopFillZerobss>

080009ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f0:	3204      	adds	r2, #4

080009f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f4:	d3fb      	bcc.n	80009ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009f6:	f000 f863 	bl	8000ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009fa:	f7ff fe3b 	bl	8000674 <main>

080009fe <LoopForever>:

LoopForever:
  b LoopForever
 80009fe:	e7fe      	b.n	80009fe <LoopForever>
  ldr   r0, =_estack
 8000a00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a08:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000a0c:	08001eb4 	.word	0x08001eb4
  ldr r2, =_sbss
 8000a10:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000a14:	200001bc 	.word	0x200001bc

08000a18 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC_IRQHandler>
	...

08000a1c <siprintf>:
 8000a1c:	b40e      	push	{r1, r2, r3}
 8000a1e:	b500      	push	{lr}
 8000a20:	b09c      	sub	sp, #112	@ 0x70
 8000a22:	ab1d      	add	r3, sp, #116	@ 0x74
 8000a24:	9002      	str	r0, [sp, #8]
 8000a26:	9006      	str	r0, [sp, #24]
 8000a28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000a2c:	4809      	ldr	r0, [pc, #36]	@ (8000a54 <siprintf+0x38>)
 8000a2e:	9107      	str	r1, [sp, #28]
 8000a30:	9104      	str	r1, [sp, #16]
 8000a32:	4909      	ldr	r1, [pc, #36]	@ (8000a58 <siprintf+0x3c>)
 8000a34:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a38:	9105      	str	r1, [sp, #20]
 8000a3a:	6800      	ldr	r0, [r0, #0]
 8000a3c:	9301      	str	r3, [sp, #4]
 8000a3e:	a902      	add	r1, sp, #8
 8000a40:	f000 f9b8 	bl	8000db4 <_svfiprintf_r>
 8000a44:	9b02      	ldr	r3, [sp, #8]
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
 8000a4a:	b01c      	add	sp, #112	@ 0x70
 8000a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000a50:	b003      	add	sp, #12
 8000a52:	4770      	bx	lr
 8000a54:	20000004 	.word	0x20000004
 8000a58:	ffff0208 	.word	0xffff0208

08000a5c <siscanf>:
 8000a5c:	b40e      	push	{r1, r2, r3}
 8000a5e:	b530      	push	{r4, r5, lr}
 8000a60:	b09c      	sub	sp, #112	@ 0x70
 8000a62:	ac1f      	add	r4, sp, #124	@ 0x7c
 8000a64:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8000a68:	f854 5b04 	ldr.w	r5, [r4], #4
 8000a6c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000a70:	9002      	str	r0, [sp, #8]
 8000a72:	9006      	str	r0, [sp, #24]
 8000a74:	f7ff fbac 	bl	80001d0 <strlen>
 8000a78:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <siscanf+0x4c>)
 8000a7a:	9003      	str	r0, [sp, #12]
 8000a7c:	9007      	str	r0, [sp, #28]
 8000a7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000a80:	480a      	ldr	r0, [pc, #40]	@ (8000aac <siscanf+0x50>)
 8000a82:	9401      	str	r4, [sp, #4]
 8000a84:	2300      	movs	r3, #0
 8000a86:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000a88:	9314      	str	r3, [sp, #80]	@ 0x50
 8000a8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a8e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000a92:	462a      	mov	r2, r5
 8000a94:	4623      	mov	r3, r4
 8000a96:	a902      	add	r1, sp, #8
 8000a98:	6800      	ldr	r0, [r0, #0]
 8000a9a:	f000 fadf 	bl	800105c <__ssvfiscanf_r>
 8000a9e:	b01c      	add	sp, #112	@ 0x70
 8000aa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000aa4:	b003      	add	sp, #12
 8000aa6:	4770      	bx	lr
 8000aa8:	08000ab1 	.word	0x08000ab1
 8000aac:	20000004 	.word	0x20000004

08000ab0 <__seofread>:
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <__errno>:
 8000ab4:	4b01      	ldr	r3, [pc, #4]	@ (8000abc <__errno+0x8>)
 8000ab6:	6818      	ldr	r0, [r3, #0]
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000004 	.word	0x20000004

08000ac0 <__libc_init_array>:
 8000ac0:	b570      	push	{r4, r5, r6, lr}
 8000ac2:	4d0d      	ldr	r5, [pc, #52]	@ (8000af8 <__libc_init_array+0x38>)
 8000ac4:	4c0d      	ldr	r4, [pc, #52]	@ (8000afc <__libc_init_array+0x3c>)
 8000ac6:	1b64      	subs	r4, r4, r5
 8000ac8:	10a4      	asrs	r4, r4, #2
 8000aca:	2600      	movs	r6, #0
 8000acc:	42a6      	cmp	r6, r4
 8000ace:	d109      	bne.n	8000ae4 <__libc_init_array+0x24>
 8000ad0:	4d0b      	ldr	r5, [pc, #44]	@ (8000b00 <__libc_init_array+0x40>)
 8000ad2:	4c0c      	ldr	r4, [pc, #48]	@ (8000b04 <__libc_init_array+0x44>)
 8000ad4:	f001 f8e0 	bl	8001c98 <_init>
 8000ad8:	1b64      	subs	r4, r4, r5
 8000ada:	10a4      	asrs	r4, r4, #2
 8000adc:	2600      	movs	r6, #0
 8000ade:	42a6      	cmp	r6, r4
 8000ae0:	d105      	bne.n	8000aee <__libc_init_array+0x2e>
 8000ae2:	bd70      	pop	{r4, r5, r6, pc}
 8000ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae8:	4798      	blx	r3
 8000aea:	3601      	adds	r6, #1
 8000aec:	e7ee      	b.n	8000acc <__libc_init_array+0xc>
 8000aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8000af2:	4798      	blx	r3
 8000af4:	3601      	adds	r6, #1
 8000af6:	e7f2      	b.n	8000ade <__libc_init_array+0x1e>
 8000af8:	08001eac 	.word	0x08001eac
 8000afc:	08001eac 	.word	0x08001eac
 8000b00:	08001eac 	.word	0x08001eac
 8000b04:	08001eb0 	.word	0x08001eb0

08000b08 <__retarget_lock_acquire_recursive>:
 8000b08:	4770      	bx	lr

08000b0a <__retarget_lock_release_recursive>:
 8000b0a:	4770      	bx	lr

08000b0c <_free_r>:
 8000b0c:	b538      	push	{r3, r4, r5, lr}
 8000b0e:	4605      	mov	r5, r0
 8000b10:	2900      	cmp	r1, #0
 8000b12:	d041      	beq.n	8000b98 <_free_r+0x8c>
 8000b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b18:	1f0c      	subs	r4, r1, #4
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	bfb8      	it	lt
 8000b1e:	18e4      	addlt	r4, r4, r3
 8000b20:	f000 f8e0 	bl	8000ce4 <__malloc_lock>
 8000b24:	4a1d      	ldr	r2, [pc, #116]	@ (8000b9c <_free_r+0x90>)
 8000b26:	6813      	ldr	r3, [r2, #0]
 8000b28:	b933      	cbnz	r3, 8000b38 <_free_r+0x2c>
 8000b2a:	6063      	str	r3, [r4, #4]
 8000b2c:	6014      	str	r4, [r2, #0]
 8000b2e:	4628      	mov	r0, r5
 8000b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b34:	f000 b8dc 	b.w	8000cf0 <__malloc_unlock>
 8000b38:	42a3      	cmp	r3, r4
 8000b3a:	d908      	bls.n	8000b4e <_free_r+0x42>
 8000b3c:	6820      	ldr	r0, [r4, #0]
 8000b3e:	1821      	adds	r1, r4, r0
 8000b40:	428b      	cmp	r3, r1
 8000b42:	bf01      	itttt	eq
 8000b44:	6819      	ldreq	r1, [r3, #0]
 8000b46:	685b      	ldreq	r3, [r3, #4]
 8000b48:	1809      	addeq	r1, r1, r0
 8000b4a:	6021      	streq	r1, [r4, #0]
 8000b4c:	e7ed      	b.n	8000b2a <_free_r+0x1e>
 8000b4e:	461a      	mov	r2, r3
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	b10b      	cbz	r3, 8000b58 <_free_r+0x4c>
 8000b54:	42a3      	cmp	r3, r4
 8000b56:	d9fa      	bls.n	8000b4e <_free_r+0x42>
 8000b58:	6811      	ldr	r1, [r2, #0]
 8000b5a:	1850      	adds	r0, r2, r1
 8000b5c:	42a0      	cmp	r0, r4
 8000b5e:	d10b      	bne.n	8000b78 <_free_r+0x6c>
 8000b60:	6820      	ldr	r0, [r4, #0]
 8000b62:	4401      	add	r1, r0
 8000b64:	1850      	adds	r0, r2, r1
 8000b66:	4283      	cmp	r3, r0
 8000b68:	6011      	str	r1, [r2, #0]
 8000b6a:	d1e0      	bne.n	8000b2e <_free_r+0x22>
 8000b6c:	6818      	ldr	r0, [r3, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	6053      	str	r3, [r2, #4]
 8000b72:	4408      	add	r0, r1
 8000b74:	6010      	str	r0, [r2, #0]
 8000b76:	e7da      	b.n	8000b2e <_free_r+0x22>
 8000b78:	d902      	bls.n	8000b80 <_free_r+0x74>
 8000b7a:	230c      	movs	r3, #12
 8000b7c:	602b      	str	r3, [r5, #0]
 8000b7e:	e7d6      	b.n	8000b2e <_free_r+0x22>
 8000b80:	6820      	ldr	r0, [r4, #0]
 8000b82:	1821      	adds	r1, r4, r0
 8000b84:	428b      	cmp	r3, r1
 8000b86:	bf04      	itt	eq
 8000b88:	6819      	ldreq	r1, [r3, #0]
 8000b8a:	685b      	ldreq	r3, [r3, #4]
 8000b8c:	6063      	str	r3, [r4, #4]
 8000b8e:	bf04      	itt	eq
 8000b90:	1809      	addeq	r1, r1, r0
 8000b92:	6021      	streq	r1, [r4, #0]
 8000b94:	6054      	str	r4, [r2, #4]
 8000b96:	e7ca      	b.n	8000b2e <_free_r+0x22>
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200001b8 	.word	0x200001b8

08000ba0 <sbrk_aligned>:
 8000ba0:	b570      	push	{r4, r5, r6, lr}
 8000ba2:	4e0f      	ldr	r6, [pc, #60]	@ (8000be0 <sbrk_aligned+0x40>)
 8000ba4:	460c      	mov	r4, r1
 8000ba6:	6831      	ldr	r1, [r6, #0]
 8000ba8:	4605      	mov	r5, r0
 8000baa:	b911      	cbnz	r1, 8000bb2 <sbrk_aligned+0x12>
 8000bac:	f000 ff34 	bl	8001a18 <_sbrk_r>
 8000bb0:	6030      	str	r0, [r6, #0]
 8000bb2:	4621      	mov	r1, r4
 8000bb4:	4628      	mov	r0, r5
 8000bb6:	f000 ff2f 	bl	8001a18 <_sbrk_r>
 8000bba:	1c43      	adds	r3, r0, #1
 8000bbc:	d103      	bne.n	8000bc6 <sbrk_aligned+0x26>
 8000bbe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	bd70      	pop	{r4, r5, r6, pc}
 8000bc6:	1cc4      	adds	r4, r0, #3
 8000bc8:	f024 0403 	bic.w	r4, r4, #3
 8000bcc:	42a0      	cmp	r0, r4
 8000bce:	d0f8      	beq.n	8000bc2 <sbrk_aligned+0x22>
 8000bd0:	1a21      	subs	r1, r4, r0
 8000bd2:	4628      	mov	r0, r5
 8000bd4:	f000 ff20 	bl	8001a18 <_sbrk_r>
 8000bd8:	3001      	adds	r0, #1
 8000bda:	d1f2      	bne.n	8000bc2 <sbrk_aligned+0x22>
 8000bdc:	e7ef      	b.n	8000bbe <sbrk_aligned+0x1e>
 8000bde:	bf00      	nop
 8000be0:	200001b4 	.word	0x200001b4

08000be4 <_malloc_r>:
 8000be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000be8:	1ccd      	adds	r5, r1, #3
 8000bea:	f025 0503 	bic.w	r5, r5, #3
 8000bee:	3508      	adds	r5, #8
 8000bf0:	2d0c      	cmp	r5, #12
 8000bf2:	bf38      	it	cc
 8000bf4:	250c      	movcc	r5, #12
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	4606      	mov	r6, r0
 8000bfa:	db01      	blt.n	8000c00 <_malloc_r+0x1c>
 8000bfc:	42a9      	cmp	r1, r5
 8000bfe:	d904      	bls.n	8000c0a <_malloc_r+0x26>
 8000c00:	230c      	movs	r3, #12
 8000c02:	6033      	str	r3, [r6, #0]
 8000c04:	2000      	movs	r0, #0
 8000c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000ce0 <_malloc_r+0xfc>
 8000c0e:	f000 f869 	bl	8000ce4 <__malloc_lock>
 8000c12:	f8d8 3000 	ldr.w	r3, [r8]
 8000c16:	461c      	mov	r4, r3
 8000c18:	bb44      	cbnz	r4, 8000c6c <_malloc_r+0x88>
 8000c1a:	4629      	mov	r1, r5
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	f7ff ffbf 	bl	8000ba0 <sbrk_aligned>
 8000c22:	1c43      	adds	r3, r0, #1
 8000c24:	4604      	mov	r4, r0
 8000c26:	d158      	bne.n	8000cda <_malloc_r+0xf6>
 8000c28:	f8d8 4000 	ldr.w	r4, [r8]
 8000c2c:	4627      	mov	r7, r4
 8000c2e:	2f00      	cmp	r7, #0
 8000c30:	d143      	bne.n	8000cba <_malloc_r+0xd6>
 8000c32:	2c00      	cmp	r4, #0
 8000c34:	d04b      	beq.n	8000cce <_malloc_r+0xea>
 8000c36:	6823      	ldr	r3, [r4, #0]
 8000c38:	4639      	mov	r1, r7
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	eb04 0903 	add.w	r9, r4, r3
 8000c40:	f000 feea 	bl	8001a18 <_sbrk_r>
 8000c44:	4581      	cmp	r9, r0
 8000c46:	d142      	bne.n	8000cce <_malloc_r+0xea>
 8000c48:	6821      	ldr	r1, [r4, #0]
 8000c4a:	1a6d      	subs	r5, r5, r1
 8000c4c:	4629      	mov	r1, r5
 8000c4e:	4630      	mov	r0, r6
 8000c50:	f7ff ffa6 	bl	8000ba0 <sbrk_aligned>
 8000c54:	3001      	adds	r0, #1
 8000c56:	d03a      	beq.n	8000cce <_malloc_r+0xea>
 8000c58:	6823      	ldr	r3, [r4, #0]
 8000c5a:	442b      	add	r3, r5
 8000c5c:	6023      	str	r3, [r4, #0]
 8000c5e:	f8d8 3000 	ldr.w	r3, [r8]
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	bb62      	cbnz	r2, 8000cc0 <_malloc_r+0xdc>
 8000c66:	f8c8 7000 	str.w	r7, [r8]
 8000c6a:	e00f      	b.n	8000c8c <_malloc_r+0xa8>
 8000c6c:	6822      	ldr	r2, [r4, #0]
 8000c6e:	1b52      	subs	r2, r2, r5
 8000c70:	d420      	bmi.n	8000cb4 <_malloc_r+0xd0>
 8000c72:	2a0b      	cmp	r2, #11
 8000c74:	d917      	bls.n	8000ca6 <_malloc_r+0xc2>
 8000c76:	1961      	adds	r1, r4, r5
 8000c78:	42a3      	cmp	r3, r4
 8000c7a:	6025      	str	r5, [r4, #0]
 8000c7c:	bf18      	it	ne
 8000c7e:	6059      	strne	r1, [r3, #4]
 8000c80:	6863      	ldr	r3, [r4, #4]
 8000c82:	bf08      	it	eq
 8000c84:	f8c8 1000 	streq.w	r1, [r8]
 8000c88:	5162      	str	r2, [r4, r5]
 8000c8a:	604b      	str	r3, [r1, #4]
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	f000 f82f 	bl	8000cf0 <__malloc_unlock>
 8000c92:	f104 000b 	add.w	r0, r4, #11
 8000c96:	1d23      	adds	r3, r4, #4
 8000c98:	f020 0007 	bic.w	r0, r0, #7
 8000c9c:	1ac2      	subs	r2, r0, r3
 8000c9e:	bf1c      	itt	ne
 8000ca0:	1a1b      	subne	r3, r3, r0
 8000ca2:	50a3      	strne	r3, [r4, r2]
 8000ca4:	e7af      	b.n	8000c06 <_malloc_r+0x22>
 8000ca6:	6862      	ldr	r2, [r4, #4]
 8000ca8:	42a3      	cmp	r3, r4
 8000caa:	bf0c      	ite	eq
 8000cac:	f8c8 2000 	streq.w	r2, [r8]
 8000cb0:	605a      	strne	r2, [r3, #4]
 8000cb2:	e7eb      	b.n	8000c8c <_malloc_r+0xa8>
 8000cb4:	4623      	mov	r3, r4
 8000cb6:	6864      	ldr	r4, [r4, #4]
 8000cb8:	e7ae      	b.n	8000c18 <_malloc_r+0x34>
 8000cba:	463c      	mov	r4, r7
 8000cbc:	687f      	ldr	r7, [r7, #4]
 8000cbe:	e7b6      	b.n	8000c2e <_malloc_r+0x4a>
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	42a3      	cmp	r3, r4
 8000cc6:	d1fb      	bne.n	8000cc0 <_malloc_r+0xdc>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	6053      	str	r3, [r2, #4]
 8000ccc:	e7de      	b.n	8000c8c <_malloc_r+0xa8>
 8000cce:	230c      	movs	r3, #12
 8000cd0:	6033      	str	r3, [r6, #0]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	f000 f80c 	bl	8000cf0 <__malloc_unlock>
 8000cd8:	e794      	b.n	8000c04 <_malloc_r+0x20>
 8000cda:	6005      	str	r5, [r0, #0]
 8000cdc:	e7d6      	b.n	8000c8c <_malloc_r+0xa8>
 8000cde:	bf00      	nop
 8000ce0:	200001b8 	.word	0x200001b8

08000ce4 <__malloc_lock>:
 8000ce4:	4801      	ldr	r0, [pc, #4]	@ (8000cec <__malloc_lock+0x8>)
 8000ce6:	f7ff bf0f 	b.w	8000b08 <__retarget_lock_acquire_recursive>
 8000cea:	bf00      	nop
 8000cec:	200001b0 	.word	0x200001b0

08000cf0 <__malloc_unlock>:
 8000cf0:	4801      	ldr	r0, [pc, #4]	@ (8000cf8 <__malloc_unlock+0x8>)
 8000cf2:	f7ff bf0a 	b.w	8000b0a <__retarget_lock_release_recursive>
 8000cf6:	bf00      	nop
 8000cf8:	200001b0 	.word	0x200001b0

08000cfc <__ssputs_r>:
 8000cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d00:	688e      	ldr	r6, [r1, #8]
 8000d02:	461f      	mov	r7, r3
 8000d04:	42be      	cmp	r6, r7
 8000d06:	680b      	ldr	r3, [r1, #0]
 8000d08:	4682      	mov	sl, r0
 8000d0a:	460c      	mov	r4, r1
 8000d0c:	4690      	mov	r8, r2
 8000d0e:	d82d      	bhi.n	8000d6c <__ssputs_r+0x70>
 8000d10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000d14:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000d18:	d026      	beq.n	8000d68 <__ssputs_r+0x6c>
 8000d1a:	6965      	ldr	r5, [r4, #20]
 8000d1c:	6909      	ldr	r1, [r1, #16]
 8000d1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000d22:	eba3 0901 	sub.w	r9, r3, r1
 8000d26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000d2a:	1c7b      	adds	r3, r7, #1
 8000d2c:	444b      	add	r3, r9
 8000d2e:	106d      	asrs	r5, r5, #1
 8000d30:	429d      	cmp	r5, r3
 8000d32:	bf38      	it	cc
 8000d34:	461d      	movcc	r5, r3
 8000d36:	0553      	lsls	r3, r2, #21
 8000d38:	d527      	bpl.n	8000d8a <__ssputs_r+0x8e>
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	f7ff ff52 	bl	8000be4 <_malloc_r>
 8000d40:	4606      	mov	r6, r0
 8000d42:	b360      	cbz	r0, 8000d9e <__ssputs_r+0xa2>
 8000d44:	6921      	ldr	r1, [r4, #16]
 8000d46:	464a      	mov	r2, r9
 8000d48:	f000 fe76 	bl	8001a38 <memcpy>
 8000d4c:	89a3      	ldrh	r3, [r4, #12]
 8000d4e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d56:	81a3      	strh	r3, [r4, #12]
 8000d58:	6126      	str	r6, [r4, #16]
 8000d5a:	6165      	str	r5, [r4, #20]
 8000d5c:	444e      	add	r6, r9
 8000d5e:	eba5 0509 	sub.w	r5, r5, r9
 8000d62:	6026      	str	r6, [r4, #0]
 8000d64:	60a5      	str	r5, [r4, #8]
 8000d66:	463e      	mov	r6, r7
 8000d68:	42be      	cmp	r6, r7
 8000d6a:	d900      	bls.n	8000d6e <__ssputs_r+0x72>
 8000d6c:	463e      	mov	r6, r7
 8000d6e:	6820      	ldr	r0, [r4, #0]
 8000d70:	4632      	mov	r2, r6
 8000d72:	4641      	mov	r1, r8
 8000d74:	f000 fe35 	bl	80019e2 <memmove>
 8000d78:	68a3      	ldr	r3, [r4, #8]
 8000d7a:	1b9b      	subs	r3, r3, r6
 8000d7c:	60a3      	str	r3, [r4, #8]
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	4433      	add	r3, r6
 8000d82:	6023      	str	r3, [r4, #0]
 8000d84:	2000      	movs	r0, #0
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	462a      	mov	r2, r5
 8000d8c:	f000 fe62 	bl	8001a54 <_realloc_r>
 8000d90:	4606      	mov	r6, r0
 8000d92:	2800      	cmp	r0, #0
 8000d94:	d1e0      	bne.n	8000d58 <__ssputs_r+0x5c>
 8000d96:	6921      	ldr	r1, [r4, #16]
 8000d98:	4650      	mov	r0, sl
 8000d9a:	f7ff feb7 	bl	8000b0c <_free_r>
 8000d9e:	230c      	movs	r3, #12
 8000da0:	f8ca 3000 	str.w	r3, [sl]
 8000da4:	89a3      	ldrh	r3, [r4, #12]
 8000da6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000daa:	81a3      	strh	r3, [r4, #12]
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000db0:	e7e9      	b.n	8000d86 <__ssputs_r+0x8a>
	...

08000db4 <_svfiprintf_r>:
 8000db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000db8:	4698      	mov	r8, r3
 8000dba:	898b      	ldrh	r3, [r1, #12]
 8000dbc:	061b      	lsls	r3, r3, #24
 8000dbe:	b09d      	sub	sp, #116	@ 0x74
 8000dc0:	4607      	mov	r7, r0
 8000dc2:	460d      	mov	r5, r1
 8000dc4:	4614      	mov	r4, r2
 8000dc6:	d510      	bpl.n	8000dea <_svfiprintf_r+0x36>
 8000dc8:	690b      	ldr	r3, [r1, #16]
 8000dca:	b973      	cbnz	r3, 8000dea <_svfiprintf_r+0x36>
 8000dcc:	2140      	movs	r1, #64	@ 0x40
 8000dce:	f7ff ff09 	bl	8000be4 <_malloc_r>
 8000dd2:	6028      	str	r0, [r5, #0]
 8000dd4:	6128      	str	r0, [r5, #16]
 8000dd6:	b930      	cbnz	r0, 8000de6 <_svfiprintf_r+0x32>
 8000dd8:	230c      	movs	r3, #12
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000de0:	b01d      	add	sp, #116	@ 0x74
 8000de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000de6:	2340      	movs	r3, #64	@ 0x40
 8000de8:	616b      	str	r3, [r5, #20]
 8000dea:	2300      	movs	r3, #0
 8000dec:	9309      	str	r3, [sp, #36]	@ 0x24
 8000dee:	2320      	movs	r3, #32
 8000df0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000df4:	f8cd 800c 	str.w	r8, [sp, #12]
 8000df8:	2330      	movs	r3, #48	@ 0x30
 8000dfa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000f98 <_svfiprintf_r+0x1e4>
 8000dfe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000e02:	f04f 0901 	mov.w	r9, #1
 8000e06:	4623      	mov	r3, r4
 8000e08:	469a      	mov	sl, r3
 8000e0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e0e:	b10a      	cbz	r2, 8000e14 <_svfiprintf_r+0x60>
 8000e10:	2a25      	cmp	r2, #37	@ 0x25
 8000e12:	d1f9      	bne.n	8000e08 <_svfiprintf_r+0x54>
 8000e14:	ebba 0b04 	subs.w	fp, sl, r4
 8000e18:	d00b      	beq.n	8000e32 <_svfiprintf_r+0x7e>
 8000e1a:	465b      	mov	r3, fp
 8000e1c:	4622      	mov	r2, r4
 8000e1e:	4629      	mov	r1, r5
 8000e20:	4638      	mov	r0, r7
 8000e22:	f7ff ff6b 	bl	8000cfc <__ssputs_r>
 8000e26:	3001      	adds	r0, #1
 8000e28:	f000 80a7 	beq.w	8000f7a <_svfiprintf_r+0x1c6>
 8000e2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000e2e:	445a      	add	r2, fp
 8000e30:	9209      	str	r2, [sp, #36]	@ 0x24
 8000e32:	f89a 3000 	ldrb.w	r3, [sl]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 809f 	beq.w	8000f7a <_svfiprintf_r+0x1c6>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e46:	f10a 0a01 	add.w	sl, sl, #1
 8000e4a:	9304      	str	r3, [sp, #16]
 8000e4c:	9307      	str	r3, [sp, #28]
 8000e4e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000e52:	931a      	str	r3, [sp, #104]	@ 0x68
 8000e54:	4654      	mov	r4, sl
 8000e56:	2205      	movs	r2, #5
 8000e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e5c:	484e      	ldr	r0, [pc, #312]	@ (8000f98 <_svfiprintf_r+0x1e4>)
 8000e5e:	f7ff f9bf 	bl	80001e0 <memchr>
 8000e62:	9a04      	ldr	r2, [sp, #16]
 8000e64:	b9d8      	cbnz	r0, 8000e9e <_svfiprintf_r+0xea>
 8000e66:	06d0      	lsls	r0, r2, #27
 8000e68:	bf44      	itt	mi
 8000e6a:	2320      	movmi	r3, #32
 8000e6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e70:	0711      	lsls	r1, r2, #28
 8000e72:	bf44      	itt	mi
 8000e74:	232b      	movmi	r3, #43	@ 0x2b
 8000e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e7a:	f89a 3000 	ldrb.w	r3, [sl]
 8000e7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e80:	d015      	beq.n	8000eae <_svfiprintf_r+0xfa>
 8000e82:	9a07      	ldr	r2, [sp, #28]
 8000e84:	4654      	mov	r4, sl
 8000e86:	2000      	movs	r0, #0
 8000e88:	f04f 0c0a 	mov.w	ip, #10
 8000e8c:	4621      	mov	r1, r4
 8000e8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e92:	3b30      	subs	r3, #48	@ 0x30
 8000e94:	2b09      	cmp	r3, #9
 8000e96:	d94b      	bls.n	8000f30 <_svfiprintf_r+0x17c>
 8000e98:	b1b0      	cbz	r0, 8000ec8 <_svfiprintf_r+0x114>
 8000e9a:	9207      	str	r2, [sp, #28]
 8000e9c:	e014      	b.n	8000ec8 <_svfiprintf_r+0x114>
 8000e9e:	eba0 0308 	sub.w	r3, r0, r8
 8000ea2:	fa09 f303 	lsl.w	r3, r9, r3
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	9304      	str	r3, [sp, #16]
 8000eaa:	46a2      	mov	sl, r4
 8000eac:	e7d2      	b.n	8000e54 <_svfiprintf_r+0xa0>
 8000eae:	9b03      	ldr	r3, [sp, #12]
 8000eb0:	1d19      	adds	r1, r3, #4
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	9103      	str	r1, [sp, #12]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	bfbb      	ittet	lt
 8000eba:	425b      	neglt	r3, r3
 8000ebc:	f042 0202 	orrlt.w	r2, r2, #2
 8000ec0:	9307      	strge	r3, [sp, #28]
 8000ec2:	9307      	strlt	r3, [sp, #28]
 8000ec4:	bfb8      	it	lt
 8000ec6:	9204      	strlt	r2, [sp, #16]
 8000ec8:	7823      	ldrb	r3, [r4, #0]
 8000eca:	2b2e      	cmp	r3, #46	@ 0x2e
 8000ecc:	d10a      	bne.n	8000ee4 <_svfiprintf_r+0x130>
 8000ece:	7863      	ldrb	r3, [r4, #1]
 8000ed0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ed2:	d132      	bne.n	8000f3a <_svfiprintf_r+0x186>
 8000ed4:	9b03      	ldr	r3, [sp, #12]
 8000ed6:	1d1a      	adds	r2, r3, #4
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	9203      	str	r2, [sp, #12]
 8000edc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000ee0:	3402      	adds	r4, #2
 8000ee2:	9305      	str	r3, [sp, #20]
 8000ee4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000f9c <_svfiprintf_r+0x1e8>
 8000ee8:	7821      	ldrb	r1, [r4, #0]
 8000eea:	2203      	movs	r2, #3
 8000eec:	4650      	mov	r0, sl
 8000eee:	f7ff f977 	bl	80001e0 <memchr>
 8000ef2:	b138      	cbz	r0, 8000f04 <_svfiprintf_r+0x150>
 8000ef4:	9b04      	ldr	r3, [sp, #16]
 8000ef6:	eba0 000a 	sub.w	r0, r0, sl
 8000efa:	2240      	movs	r2, #64	@ 0x40
 8000efc:	4082      	lsls	r2, r0
 8000efe:	4313      	orrs	r3, r2
 8000f00:	3401      	adds	r4, #1
 8000f02:	9304      	str	r3, [sp, #16]
 8000f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f08:	4825      	ldr	r0, [pc, #148]	@ (8000fa0 <_svfiprintf_r+0x1ec>)
 8000f0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000f0e:	2206      	movs	r2, #6
 8000f10:	f7ff f966 	bl	80001e0 <memchr>
 8000f14:	2800      	cmp	r0, #0
 8000f16:	d036      	beq.n	8000f86 <_svfiprintf_r+0x1d2>
 8000f18:	4b22      	ldr	r3, [pc, #136]	@ (8000fa4 <_svfiprintf_r+0x1f0>)
 8000f1a:	bb1b      	cbnz	r3, 8000f64 <_svfiprintf_r+0x1b0>
 8000f1c:	9b03      	ldr	r3, [sp, #12]
 8000f1e:	3307      	adds	r3, #7
 8000f20:	f023 0307 	bic.w	r3, r3, #7
 8000f24:	3308      	adds	r3, #8
 8000f26:	9303      	str	r3, [sp, #12]
 8000f28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000f2a:	4433      	add	r3, r6
 8000f2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f2e:	e76a      	b.n	8000e06 <_svfiprintf_r+0x52>
 8000f30:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f34:	460c      	mov	r4, r1
 8000f36:	2001      	movs	r0, #1
 8000f38:	e7a8      	b.n	8000e8c <_svfiprintf_r+0xd8>
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	3401      	adds	r4, #1
 8000f3e:	9305      	str	r3, [sp, #20]
 8000f40:	4619      	mov	r1, r3
 8000f42:	f04f 0c0a 	mov.w	ip, #10
 8000f46:	4620      	mov	r0, r4
 8000f48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f4c:	3a30      	subs	r2, #48	@ 0x30
 8000f4e:	2a09      	cmp	r2, #9
 8000f50:	d903      	bls.n	8000f5a <_svfiprintf_r+0x1a6>
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0c6      	beq.n	8000ee4 <_svfiprintf_r+0x130>
 8000f56:	9105      	str	r1, [sp, #20]
 8000f58:	e7c4      	b.n	8000ee4 <_svfiprintf_r+0x130>
 8000f5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f5e:	4604      	mov	r4, r0
 8000f60:	2301      	movs	r3, #1
 8000f62:	e7f0      	b.n	8000f46 <_svfiprintf_r+0x192>
 8000f64:	ab03      	add	r3, sp, #12
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	462a      	mov	r2, r5
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <_svfiprintf_r+0x1f4>)
 8000f6c:	a904      	add	r1, sp, #16
 8000f6e:	4638      	mov	r0, r7
 8000f70:	f3af 8000 	nop.w
 8000f74:	1c42      	adds	r2, r0, #1
 8000f76:	4606      	mov	r6, r0
 8000f78:	d1d6      	bne.n	8000f28 <_svfiprintf_r+0x174>
 8000f7a:	89ab      	ldrh	r3, [r5, #12]
 8000f7c:	065b      	lsls	r3, r3, #25
 8000f7e:	f53f af2d 	bmi.w	8000ddc <_svfiprintf_r+0x28>
 8000f82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000f84:	e72c      	b.n	8000de0 <_svfiprintf_r+0x2c>
 8000f86:	ab03      	add	r3, sp, #12
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	462a      	mov	r2, r5
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <_svfiprintf_r+0x1f4>)
 8000f8e:	a904      	add	r1, sp, #16
 8000f90:	4638      	mov	r0, r7
 8000f92:	f000 fa45 	bl	8001420 <_printf_i>
 8000f96:	e7ed      	b.n	8000f74 <_svfiprintf_r+0x1c0>
 8000f98:	08001d54 	.word	0x08001d54
 8000f9c:	08001d5a 	.word	0x08001d5a
 8000fa0:	08001d5e 	.word	0x08001d5e
 8000fa4:	00000000 	.word	0x00000000
 8000fa8:	08000cfd 	.word	0x08000cfd

08000fac <_sungetc_r>:
 8000fac:	b538      	push	{r3, r4, r5, lr}
 8000fae:	1c4b      	adds	r3, r1, #1
 8000fb0:	4614      	mov	r4, r2
 8000fb2:	d103      	bne.n	8000fbc <_sungetc_r+0x10>
 8000fb4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000fb8:	4628      	mov	r0, r5
 8000fba:	bd38      	pop	{r3, r4, r5, pc}
 8000fbc:	8993      	ldrh	r3, [r2, #12]
 8000fbe:	f023 0320 	bic.w	r3, r3, #32
 8000fc2:	8193      	strh	r3, [r2, #12]
 8000fc4:	6853      	ldr	r3, [r2, #4]
 8000fc6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000fc8:	b2cd      	uxtb	r5, r1
 8000fca:	b18a      	cbz	r2, 8000ff0 <_sungetc_r+0x44>
 8000fcc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	dd08      	ble.n	8000fe4 <_sungetc_r+0x38>
 8000fd2:	6823      	ldr	r3, [r4, #0]
 8000fd4:	1e5a      	subs	r2, r3, #1
 8000fd6:	6022      	str	r2, [r4, #0]
 8000fd8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8000fdc:	6863      	ldr	r3, [r4, #4]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	6063      	str	r3, [r4, #4]
 8000fe2:	e7e9      	b.n	8000fb8 <_sungetc_r+0xc>
 8000fe4:	4621      	mov	r1, r4
 8000fe6:	f000 fcc2 	bl	800196e <__submore>
 8000fea:	2800      	cmp	r0, #0
 8000fec:	d0f1      	beq.n	8000fd2 <_sungetc_r+0x26>
 8000fee:	e7e1      	b.n	8000fb4 <_sungetc_r+0x8>
 8000ff0:	6921      	ldr	r1, [r4, #16]
 8000ff2:	6822      	ldr	r2, [r4, #0]
 8000ff4:	b141      	cbz	r1, 8001008 <_sungetc_r+0x5c>
 8000ff6:	4291      	cmp	r1, r2
 8000ff8:	d206      	bcs.n	8001008 <_sungetc_r+0x5c>
 8000ffa:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8000ffe:	42a9      	cmp	r1, r5
 8001000:	d102      	bne.n	8001008 <_sungetc_r+0x5c>
 8001002:	3a01      	subs	r2, #1
 8001004:	6022      	str	r2, [r4, #0]
 8001006:	e7ea      	b.n	8000fde <_sungetc_r+0x32>
 8001008:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800100c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001010:	6363      	str	r3, [r4, #52]	@ 0x34
 8001012:	2303      	movs	r3, #3
 8001014:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001016:	4623      	mov	r3, r4
 8001018:	f803 5f46 	strb.w	r5, [r3, #70]!
 800101c:	6023      	str	r3, [r4, #0]
 800101e:	2301      	movs	r3, #1
 8001020:	e7de      	b.n	8000fe0 <_sungetc_r+0x34>

08001022 <__ssrefill_r>:
 8001022:	b510      	push	{r4, lr}
 8001024:	460c      	mov	r4, r1
 8001026:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8001028:	b169      	cbz	r1, 8001046 <__ssrefill_r+0x24>
 800102a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800102e:	4299      	cmp	r1, r3
 8001030:	d001      	beq.n	8001036 <__ssrefill_r+0x14>
 8001032:	f7ff fd6b 	bl	8000b0c <_free_r>
 8001036:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001038:	6063      	str	r3, [r4, #4]
 800103a:	2000      	movs	r0, #0
 800103c:	6360      	str	r0, [r4, #52]	@ 0x34
 800103e:	b113      	cbz	r3, 8001046 <__ssrefill_r+0x24>
 8001040:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001042:	6023      	str	r3, [r4, #0]
 8001044:	bd10      	pop	{r4, pc}
 8001046:	6923      	ldr	r3, [r4, #16]
 8001048:	6023      	str	r3, [r4, #0]
 800104a:	2300      	movs	r3, #0
 800104c:	6063      	str	r3, [r4, #4]
 800104e:	89a3      	ldrh	r3, [r4, #12]
 8001050:	f043 0320 	orr.w	r3, r3, #32
 8001054:	81a3      	strh	r3, [r4, #12]
 8001056:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800105a:	e7f3      	b.n	8001044 <__ssrefill_r+0x22>

0800105c <__ssvfiscanf_r>:
 800105c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001060:	460c      	mov	r4, r1
 8001062:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8001066:	2100      	movs	r1, #0
 8001068:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800106c:	49a5      	ldr	r1, [pc, #660]	@ (8001304 <__ssvfiscanf_r+0x2a8>)
 800106e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8001070:	f10d 0804 	add.w	r8, sp, #4
 8001074:	49a4      	ldr	r1, [pc, #656]	@ (8001308 <__ssvfiscanf_r+0x2ac>)
 8001076:	4fa5      	ldr	r7, [pc, #660]	@ (800130c <__ssvfiscanf_r+0x2b0>)
 8001078:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800107c:	4606      	mov	r6, r0
 800107e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	7813      	ldrb	r3, [r2, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 8158 	beq.w	800133a <__ssvfiscanf_r+0x2de>
 800108a:	5cf9      	ldrb	r1, [r7, r3]
 800108c:	f011 0108 	ands.w	r1, r1, #8
 8001090:	f102 0501 	add.w	r5, r2, #1
 8001094:	d019      	beq.n	80010ca <__ssvfiscanf_r+0x6e>
 8001096:	6863      	ldr	r3, [r4, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	dd0f      	ble.n	80010bc <__ssvfiscanf_r+0x60>
 800109c:	6823      	ldr	r3, [r4, #0]
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	5cba      	ldrb	r2, [r7, r2]
 80010a2:	0712      	lsls	r2, r2, #28
 80010a4:	d401      	bmi.n	80010aa <__ssvfiscanf_r+0x4e>
 80010a6:	462a      	mov	r2, r5
 80010a8:	e7eb      	b.n	8001082 <__ssvfiscanf_r+0x26>
 80010aa:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80010ac:	3201      	adds	r2, #1
 80010ae:	9245      	str	r2, [sp, #276]	@ 0x114
 80010b0:	6862      	ldr	r2, [r4, #4]
 80010b2:	3301      	adds	r3, #1
 80010b4:	3a01      	subs	r2, #1
 80010b6:	6062      	str	r2, [r4, #4]
 80010b8:	6023      	str	r3, [r4, #0]
 80010ba:	e7ec      	b.n	8001096 <__ssvfiscanf_r+0x3a>
 80010bc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80010be:	4621      	mov	r1, r4
 80010c0:	4630      	mov	r0, r6
 80010c2:	4798      	blx	r3
 80010c4:	2800      	cmp	r0, #0
 80010c6:	d0e9      	beq.n	800109c <__ssvfiscanf_r+0x40>
 80010c8:	e7ed      	b.n	80010a6 <__ssvfiscanf_r+0x4a>
 80010ca:	2b25      	cmp	r3, #37	@ 0x25
 80010cc:	d012      	beq.n	80010f4 <__ssvfiscanf_r+0x98>
 80010ce:	4699      	mov	r9, r3
 80010d0:	6863      	ldr	r3, [r4, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f340 8093 	ble.w	80011fe <__ssvfiscanf_r+0x1a2>
 80010d8:	6822      	ldr	r2, [r4, #0]
 80010da:	7813      	ldrb	r3, [r2, #0]
 80010dc:	454b      	cmp	r3, r9
 80010de:	f040 812c 	bne.w	800133a <__ssvfiscanf_r+0x2de>
 80010e2:	6863      	ldr	r3, [r4, #4]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	6063      	str	r3, [r4, #4]
 80010e8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80010ea:	3201      	adds	r2, #1
 80010ec:	3301      	adds	r3, #1
 80010ee:	6022      	str	r2, [r4, #0]
 80010f0:	9345      	str	r3, [sp, #276]	@ 0x114
 80010f2:	e7d8      	b.n	80010a6 <__ssvfiscanf_r+0x4a>
 80010f4:	9141      	str	r1, [sp, #260]	@ 0x104
 80010f6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80010f8:	7853      	ldrb	r3, [r2, #1]
 80010fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80010fc:	bf02      	ittt	eq
 80010fe:	2310      	moveq	r3, #16
 8001100:	1c95      	addeq	r5, r2, #2
 8001102:	9341      	streq	r3, [sp, #260]	@ 0x104
 8001104:	220a      	movs	r2, #10
 8001106:	46a9      	mov	r9, r5
 8001108:	f819 1b01 	ldrb.w	r1, [r9], #1
 800110c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8001110:	2b09      	cmp	r3, #9
 8001112:	d91e      	bls.n	8001152 <__ssvfiscanf_r+0xf6>
 8001114:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8001310 <__ssvfiscanf_r+0x2b4>
 8001118:	2203      	movs	r2, #3
 800111a:	4650      	mov	r0, sl
 800111c:	f7ff f860 	bl	80001e0 <memchr>
 8001120:	b138      	cbz	r0, 8001132 <__ssvfiscanf_r+0xd6>
 8001122:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8001124:	eba0 000a 	sub.w	r0, r0, sl
 8001128:	2301      	movs	r3, #1
 800112a:	4083      	lsls	r3, r0
 800112c:	4313      	orrs	r3, r2
 800112e:	9341      	str	r3, [sp, #260]	@ 0x104
 8001130:	464d      	mov	r5, r9
 8001132:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001136:	2b78      	cmp	r3, #120	@ 0x78
 8001138:	d806      	bhi.n	8001148 <__ssvfiscanf_r+0xec>
 800113a:	2b57      	cmp	r3, #87	@ 0x57
 800113c:	d810      	bhi.n	8001160 <__ssvfiscanf_r+0x104>
 800113e:	2b25      	cmp	r3, #37	@ 0x25
 8001140:	d0c5      	beq.n	80010ce <__ssvfiscanf_r+0x72>
 8001142:	d857      	bhi.n	80011f4 <__ssvfiscanf_r+0x198>
 8001144:	2b00      	cmp	r3, #0
 8001146:	d065      	beq.n	8001214 <__ssvfiscanf_r+0x1b8>
 8001148:	2303      	movs	r3, #3
 800114a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800114c:	230a      	movs	r3, #10
 800114e:	9342      	str	r3, [sp, #264]	@ 0x108
 8001150:	e078      	b.n	8001244 <__ssvfiscanf_r+0x1e8>
 8001152:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8001154:	fb02 1103 	mla	r1, r2, r3, r1
 8001158:	3930      	subs	r1, #48	@ 0x30
 800115a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800115c:	464d      	mov	r5, r9
 800115e:	e7d2      	b.n	8001106 <__ssvfiscanf_r+0xaa>
 8001160:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8001164:	2a20      	cmp	r2, #32
 8001166:	d8ef      	bhi.n	8001148 <__ssvfiscanf_r+0xec>
 8001168:	a101      	add	r1, pc, #4	@ (adr r1, 8001170 <__ssvfiscanf_r+0x114>)
 800116a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800116e:	bf00      	nop
 8001170:	08001223 	.word	0x08001223
 8001174:	08001149 	.word	0x08001149
 8001178:	08001149 	.word	0x08001149
 800117c:	0800127d 	.word	0x0800127d
 8001180:	08001149 	.word	0x08001149
 8001184:	08001149 	.word	0x08001149
 8001188:	08001149 	.word	0x08001149
 800118c:	08001149 	.word	0x08001149
 8001190:	08001149 	.word	0x08001149
 8001194:	08001149 	.word	0x08001149
 8001198:	08001149 	.word	0x08001149
 800119c:	08001293 	.word	0x08001293
 80011a0:	08001279 	.word	0x08001279
 80011a4:	080011fb 	.word	0x080011fb
 80011a8:	080011fb 	.word	0x080011fb
 80011ac:	080011fb 	.word	0x080011fb
 80011b0:	08001149 	.word	0x08001149
 80011b4:	08001235 	.word	0x08001235
 80011b8:	08001149 	.word	0x08001149
 80011bc:	08001149 	.word	0x08001149
 80011c0:	08001149 	.word	0x08001149
 80011c4:	08001149 	.word	0x08001149
 80011c8:	080012a3 	.word	0x080012a3
 80011cc:	0800123d 	.word	0x0800123d
 80011d0:	0800121b 	.word	0x0800121b
 80011d4:	08001149 	.word	0x08001149
 80011d8:	08001149 	.word	0x08001149
 80011dc:	0800129f 	.word	0x0800129f
 80011e0:	08001149 	.word	0x08001149
 80011e4:	08001279 	.word	0x08001279
 80011e8:	08001149 	.word	0x08001149
 80011ec:	08001149 	.word	0x08001149
 80011f0:	08001223 	.word	0x08001223
 80011f4:	3b45      	subs	r3, #69	@ 0x45
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d8a6      	bhi.n	8001148 <__ssvfiscanf_r+0xec>
 80011fa:	2305      	movs	r3, #5
 80011fc:	e021      	b.n	8001242 <__ssvfiscanf_r+0x1e6>
 80011fe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8001200:	4621      	mov	r1, r4
 8001202:	4630      	mov	r0, r6
 8001204:	4798      	blx	r3
 8001206:	2800      	cmp	r0, #0
 8001208:	f43f af66 	beq.w	80010d8 <__ssvfiscanf_r+0x7c>
 800120c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800120e:	2800      	cmp	r0, #0
 8001210:	f040 808b 	bne.w	800132a <__ssvfiscanf_r+0x2ce>
 8001214:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001218:	e08b      	b.n	8001332 <__ssvfiscanf_r+0x2d6>
 800121a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800121c:	f042 0220 	orr.w	r2, r2, #32
 8001220:	9241      	str	r2, [sp, #260]	@ 0x104
 8001222:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8001224:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001228:	9241      	str	r2, [sp, #260]	@ 0x104
 800122a:	2210      	movs	r2, #16
 800122c:	2b6e      	cmp	r3, #110	@ 0x6e
 800122e:	9242      	str	r2, [sp, #264]	@ 0x108
 8001230:	d902      	bls.n	8001238 <__ssvfiscanf_r+0x1dc>
 8001232:	e005      	b.n	8001240 <__ssvfiscanf_r+0x1e4>
 8001234:	2300      	movs	r3, #0
 8001236:	9342      	str	r3, [sp, #264]	@ 0x108
 8001238:	2303      	movs	r3, #3
 800123a:	e002      	b.n	8001242 <__ssvfiscanf_r+0x1e6>
 800123c:	2308      	movs	r3, #8
 800123e:	9342      	str	r3, [sp, #264]	@ 0x108
 8001240:	2304      	movs	r3, #4
 8001242:	9347      	str	r3, [sp, #284]	@ 0x11c
 8001244:	6863      	ldr	r3, [r4, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	dd39      	ble.n	80012be <__ssvfiscanf_r+0x262>
 800124a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800124c:	0659      	lsls	r1, r3, #25
 800124e:	d404      	bmi.n	800125a <__ssvfiscanf_r+0x1fe>
 8001250:	6823      	ldr	r3, [r4, #0]
 8001252:	781a      	ldrb	r2, [r3, #0]
 8001254:	5cba      	ldrb	r2, [r7, r2]
 8001256:	0712      	lsls	r2, r2, #28
 8001258:	d438      	bmi.n	80012cc <__ssvfiscanf_r+0x270>
 800125a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800125c:	2b02      	cmp	r3, #2
 800125e:	dc47      	bgt.n	80012f0 <__ssvfiscanf_r+0x294>
 8001260:	466b      	mov	r3, sp
 8001262:	4622      	mov	r2, r4
 8001264:	a941      	add	r1, sp, #260	@ 0x104
 8001266:	4630      	mov	r0, r6
 8001268:	f000 f9fa 	bl	8001660 <_scanf_chars>
 800126c:	2801      	cmp	r0, #1
 800126e:	d064      	beq.n	800133a <__ssvfiscanf_r+0x2de>
 8001270:	2802      	cmp	r0, #2
 8001272:	f47f af18 	bne.w	80010a6 <__ssvfiscanf_r+0x4a>
 8001276:	e7c9      	b.n	800120c <__ssvfiscanf_r+0x1b0>
 8001278:	220a      	movs	r2, #10
 800127a:	e7d7      	b.n	800122c <__ssvfiscanf_r+0x1d0>
 800127c:	4629      	mov	r1, r5
 800127e:	4640      	mov	r0, r8
 8001280:	f000 fb3c 	bl	80018fc <__sccl>
 8001284:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8001286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800128a:	9341      	str	r3, [sp, #260]	@ 0x104
 800128c:	4605      	mov	r5, r0
 800128e:	2301      	movs	r3, #1
 8001290:	e7d7      	b.n	8001242 <__ssvfiscanf_r+0x1e6>
 8001292:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8001294:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001298:	9341      	str	r3, [sp, #260]	@ 0x104
 800129a:	2300      	movs	r3, #0
 800129c:	e7d1      	b.n	8001242 <__ssvfiscanf_r+0x1e6>
 800129e:	2302      	movs	r3, #2
 80012a0:	e7cf      	b.n	8001242 <__ssvfiscanf_r+0x1e6>
 80012a2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80012a4:	06c3      	lsls	r3, r0, #27
 80012a6:	f53f aefe 	bmi.w	80010a6 <__ssvfiscanf_r+0x4a>
 80012aa:	9b00      	ldr	r3, [sp, #0]
 80012ac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80012ae:	1d19      	adds	r1, r3, #4
 80012b0:	9100      	str	r1, [sp, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	07c0      	lsls	r0, r0, #31
 80012b6:	bf4c      	ite	mi
 80012b8:	801a      	strhmi	r2, [r3, #0]
 80012ba:	601a      	strpl	r2, [r3, #0]
 80012bc:	e6f3      	b.n	80010a6 <__ssvfiscanf_r+0x4a>
 80012be:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80012c0:	4621      	mov	r1, r4
 80012c2:	4630      	mov	r0, r6
 80012c4:	4798      	blx	r3
 80012c6:	2800      	cmp	r0, #0
 80012c8:	d0bf      	beq.n	800124a <__ssvfiscanf_r+0x1ee>
 80012ca:	e79f      	b.n	800120c <__ssvfiscanf_r+0x1b0>
 80012cc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80012ce:	3201      	adds	r2, #1
 80012d0:	9245      	str	r2, [sp, #276]	@ 0x114
 80012d2:	6862      	ldr	r2, [r4, #4]
 80012d4:	3a01      	subs	r2, #1
 80012d6:	2a00      	cmp	r2, #0
 80012d8:	6062      	str	r2, [r4, #4]
 80012da:	dd02      	ble.n	80012e2 <__ssvfiscanf_r+0x286>
 80012dc:	3301      	adds	r3, #1
 80012de:	6023      	str	r3, [r4, #0]
 80012e0:	e7b6      	b.n	8001250 <__ssvfiscanf_r+0x1f4>
 80012e2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80012e4:	4621      	mov	r1, r4
 80012e6:	4630      	mov	r0, r6
 80012e8:	4798      	blx	r3
 80012ea:	2800      	cmp	r0, #0
 80012ec:	d0b0      	beq.n	8001250 <__ssvfiscanf_r+0x1f4>
 80012ee:	e78d      	b.n	800120c <__ssvfiscanf_r+0x1b0>
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	dc0f      	bgt.n	8001314 <__ssvfiscanf_r+0x2b8>
 80012f4:	466b      	mov	r3, sp
 80012f6:	4622      	mov	r2, r4
 80012f8:	a941      	add	r1, sp, #260	@ 0x104
 80012fa:	4630      	mov	r0, r6
 80012fc:	f000 fa0a 	bl	8001714 <_scanf_i>
 8001300:	e7b4      	b.n	800126c <__ssvfiscanf_r+0x210>
 8001302:	bf00      	nop
 8001304:	08000fad 	.word	0x08000fad
 8001308:	08001023 	.word	0x08001023
 800130c:	08001da3 	.word	0x08001da3
 8001310:	08001d5a 	.word	0x08001d5a
 8001314:	4b0a      	ldr	r3, [pc, #40]	@ (8001340 <__ssvfiscanf_r+0x2e4>)
 8001316:	2b00      	cmp	r3, #0
 8001318:	f43f aec5 	beq.w	80010a6 <__ssvfiscanf_r+0x4a>
 800131c:	466b      	mov	r3, sp
 800131e:	4622      	mov	r2, r4
 8001320:	a941      	add	r1, sp, #260	@ 0x104
 8001322:	4630      	mov	r0, r6
 8001324:	f3af 8000 	nop.w
 8001328:	e7a0      	b.n	800126c <__ssvfiscanf_r+0x210>
 800132a:	89a3      	ldrh	r3, [r4, #12]
 800132c:	065b      	lsls	r3, r3, #25
 800132e:	f53f af71 	bmi.w	8001214 <__ssvfiscanf_r+0x1b8>
 8001332:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8001336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800133a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800133c:	e7f9      	b.n	8001332 <__ssvfiscanf_r+0x2d6>
 800133e:	bf00      	nop
 8001340:	00000000 	.word	0x00000000

08001344 <_printf_common>:
 8001344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001348:	4616      	mov	r6, r2
 800134a:	4698      	mov	r8, r3
 800134c:	688a      	ldr	r2, [r1, #8]
 800134e:	690b      	ldr	r3, [r1, #16]
 8001350:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001354:	4293      	cmp	r3, r2
 8001356:	bfb8      	it	lt
 8001358:	4613      	movlt	r3, r2
 800135a:	6033      	str	r3, [r6, #0]
 800135c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001360:	4607      	mov	r7, r0
 8001362:	460c      	mov	r4, r1
 8001364:	b10a      	cbz	r2, 800136a <_printf_common+0x26>
 8001366:	3301      	adds	r3, #1
 8001368:	6033      	str	r3, [r6, #0]
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	0699      	lsls	r1, r3, #26
 800136e:	bf42      	ittt	mi
 8001370:	6833      	ldrmi	r3, [r6, #0]
 8001372:	3302      	addmi	r3, #2
 8001374:	6033      	strmi	r3, [r6, #0]
 8001376:	6825      	ldr	r5, [r4, #0]
 8001378:	f015 0506 	ands.w	r5, r5, #6
 800137c:	d106      	bne.n	800138c <_printf_common+0x48>
 800137e:	f104 0a19 	add.w	sl, r4, #25
 8001382:	68e3      	ldr	r3, [r4, #12]
 8001384:	6832      	ldr	r2, [r6, #0]
 8001386:	1a9b      	subs	r3, r3, r2
 8001388:	42ab      	cmp	r3, r5
 800138a:	dc26      	bgt.n	80013da <_printf_common+0x96>
 800138c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001390:	6822      	ldr	r2, [r4, #0]
 8001392:	3b00      	subs	r3, #0
 8001394:	bf18      	it	ne
 8001396:	2301      	movne	r3, #1
 8001398:	0692      	lsls	r2, r2, #26
 800139a:	d42b      	bmi.n	80013f4 <_printf_common+0xb0>
 800139c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80013a0:	4641      	mov	r1, r8
 80013a2:	4638      	mov	r0, r7
 80013a4:	47c8      	blx	r9
 80013a6:	3001      	adds	r0, #1
 80013a8:	d01e      	beq.n	80013e8 <_printf_common+0xa4>
 80013aa:	6823      	ldr	r3, [r4, #0]
 80013ac:	6922      	ldr	r2, [r4, #16]
 80013ae:	f003 0306 	and.w	r3, r3, #6
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	bf02      	ittt	eq
 80013b6:	68e5      	ldreq	r5, [r4, #12]
 80013b8:	6833      	ldreq	r3, [r6, #0]
 80013ba:	1aed      	subeq	r5, r5, r3
 80013bc:	68a3      	ldr	r3, [r4, #8]
 80013be:	bf0c      	ite	eq
 80013c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80013c4:	2500      	movne	r5, #0
 80013c6:	4293      	cmp	r3, r2
 80013c8:	bfc4      	itt	gt
 80013ca:	1a9b      	subgt	r3, r3, r2
 80013cc:	18ed      	addgt	r5, r5, r3
 80013ce:	2600      	movs	r6, #0
 80013d0:	341a      	adds	r4, #26
 80013d2:	42b5      	cmp	r5, r6
 80013d4:	d11a      	bne.n	800140c <_printf_common+0xc8>
 80013d6:	2000      	movs	r0, #0
 80013d8:	e008      	b.n	80013ec <_printf_common+0xa8>
 80013da:	2301      	movs	r3, #1
 80013dc:	4652      	mov	r2, sl
 80013de:	4641      	mov	r1, r8
 80013e0:	4638      	mov	r0, r7
 80013e2:	47c8      	blx	r9
 80013e4:	3001      	adds	r0, #1
 80013e6:	d103      	bne.n	80013f0 <_printf_common+0xac>
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013f0:	3501      	adds	r5, #1
 80013f2:	e7c6      	b.n	8001382 <_printf_common+0x3e>
 80013f4:	18e1      	adds	r1, r4, r3
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	2030      	movs	r0, #48	@ 0x30
 80013fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80013fe:	4422      	add	r2, r4
 8001400:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001404:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001408:	3302      	adds	r3, #2
 800140a:	e7c7      	b.n	800139c <_printf_common+0x58>
 800140c:	2301      	movs	r3, #1
 800140e:	4622      	mov	r2, r4
 8001410:	4641      	mov	r1, r8
 8001412:	4638      	mov	r0, r7
 8001414:	47c8      	blx	r9
 8001416:	3001      	adds	r0, #1
 8001418:	d0e6      	beq.n	80013e8 <_printf_common+0xa4>
 800141a:	3601      	adds	r6, #1
 800141c:	e7d9      	b.n	80013d2 <_printf_common+0x8e>
	...

08001420 <_printf_i>:
 8001420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001424:	7e0f      	ldrb	r7, [r1, #24]
 8001426:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001428:	2f78      	cmp	r7, #120	@ 0x78
 800142a:	4691      	mov	r9, r2
 800142c:	4680      	mov	r8, r0
 800142e:	460c      	mov	r4, r1
 8001430:	469a      	mov	sl, r3
 8001432:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001436:	d807      	bhi.n	8001448 <_printf_i+0x28>
 8001438:	2f62      	cmp	r7, #98	@ 0x62
 800143a:	d80a      	bhi.n	8001452 <_printf_i+0x32>
 800143c:	2f00      	cmp	r7, #0
 800143e:	f000 80d2 	beq.w	80015e6 <_printf_i+0x1c6>
 8001442:	2f58      	cmp	r7, #88	@ 0x58
 8001444:	f000 80b9 	beq.w	80015ba <_printf_i+0x19a>
 8001448:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800144c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001450:	e03a      	b.n	80014c8 <_printf_i+0xa8>
 8001452:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001456:	2b15      	cmp	r3, #21
 8001458:	d8f6      	bhi.n	8001448 <_printf_i+0x28>
 800145a:	a101      	add	r1, pc, #4	@ (adr r1, 8001460 <_printf_i+0x40>)
 800145c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001460:	080014b9 	.word	0x080014b9
 8001464:	080014cd 	.word	0x080014cd
 8001468:	08001449 	.word	0x08001449
 800146c:	08001449 	.word	0x08001449
 8001470:	08001449 	.word	0x08001449
 8001474:	08001449 	.word	0x08001449
 8001478:	080014cd 	.word	0x080014cd
 800147c:	08001449 	.word	0x08001449
 8001480:	08001449 	.word	0x08001449
 8001484:	08001449 	.word	0x08001449
 8001488:	08001449 	.word	0x08001449
 800148c:	080015cd 	.word	0x080015cd
 8001490:	080014f7 	.word	0x080014f7
 8001494:	08001587 	.word	0x08001587
 8001498:	08001449 	.word	0x08001449
 800149c:	08001449 	.word	0x08001449
 80014a0:	080015ef 	.word	0x080015ef
 80014a4:	08001449 	.word	0x08001449
 80014a8:	080014f7 	.word	0x080014f7
 80014ac:	08001449 	.word	0x08001449
 80014b0:	08001449 	.word	0x08001449
 80014b4:	0800158f 	.word	0x0800158f
 80014b8:	6833      	ldr	r3, [r6, #0]
 80014ba:	1d1a      	adds	r2, r3, #4
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6032      	str	r2, [r6, #0]
 80014c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80014c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80014c8:	2301      	movs	r3, #1
 80014ca:	e09d      	b.n	8001608 <_printf_i+0x1e8>
 80014cc:	6833      	ldr	r3, [r6, #0]
 80014ce:	6820      	ldr	r0, [r4, #0]
 80014d0:	1d19      	adds	r1, r3, #4
 80014d2:	6031      	str	r1, [r6, #0]
 80014d4:	0606      	lsls	r6, r0, #24
 80014d6:	d501      	bpl.n	80014dc <_printf_i+0xbc>
 80014d8:	681d      	ldr	r5, [r3, #0]
 80014da:	e003      	b.n	80014e4 <_printf_i+0xc4>
 80014dc:	0645      	lsls	r5, r0, #25
 80014de:	d5fb      	bpl.n	80014d8 <_printf_i+0xb8>
 80014e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80014e4:	2d00      	cmp	r5, #0
 80014e6:	da03      	bge.n	80014f0 <_printf_i+0xd0>
 80014e8:	232d      	movs	r3, #45	@ 0x2d
 80014ea:	426d      	negs	r5, r5
 80014ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80014f0:	4859      	ldr	r0, [pc, #356]	@ (8001658 <_printf_i+0x238>)
 80014f2:	230a      	movs	r3, #10
 80014f4:	e011      	b.n	800151a <_printf_i+0xfa>
 80014f6:	6821      	ldr	r1, [r4, #0]
 80014f8:	6833      	ldr	r3, [r6, #0]
 80014fa:	0608      	lsls	r0, r1, #24
 80014fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8001500:	d402      	bmi.n	8001508 <_printf_i+0xe8>
 8001502:	0649      	lsls	r1, r1, #25
 8001504:	bf48      	it	mi
 8001506:	b2ad      	uxthmi	r5, r5
 8001508:	2f6f      	cmp	r7, #111	@ 0x6f
 800150a:	4853      	ldr	r0, [pc, #332]	@ (8001658 <_printf_i+0x238>)
 800150c:	6033      	str	r3, [r6, #0]
 800150e:	bf14      	ite	ne
 8001510:	230a      	movne	r3, #10
 8001512:	2308      	moveq	r3, #8
 8001514:	2100      	movs	r1, #0
 8001516:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800151a:	6866      	ldr	r6, [r4, #4]
 800151c:	60a6      	str	r6, [r4, #8]
 800151e:	2e00      	cmp	r6, #0
 8001520:	bfa2      	ittt	ge
 8001522:	6821      	ldrge	r1, [r4, #0]
 8001524:	f021 0104 	bicge.w	r1, r1, #4
 8001528:	6021      	strge	r1, [r4, #0]
 800152a:	b90d      	cbnz	r5, 8001530 <_printf_i+0x110>
 800152c:	2e00      	cmp	r6, #0
 800152e:	d04b      	beq.n	80015c8 <_printf_i+0x1a8>
 8001530:	4616      	mov	r6, r2
 8001532:	fbb5 f1f3 	udiv	r1, r5, r3
 8001536:	fb03 5711 	mls	r7, r3, r1, r5
 800153a:	5dc7      	ldrb	r7, [r0, r7]
 800153c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001540:	462f      	mov	r7, r5
 8001542:	42bb      	cmp	r3, r7
 8001544:	460d      	mov	r5, r1
 8001546:	d9f4      	bls.n	8001532 <_printf_i+0x112>
 8001548:	2b08      	cmp	r3, #8
 800154a:	d10b      	bne.n	8001564 <_printf_i+0x144>
 800154c:	6823      	ldr	r3, [r4, #0]
 800154e:	07df      	lsls	r7, r3, #31
 8001550:	d508      	bpl.n	8001564 <_printf_i+0x144>
 8001552:	6923      	ldr	r3, [r4, #16]
 8001554:	6861      	ldr	r1, [r4, #4]
 8001556:	4299      	cmp	r1, r3
 8001558:	bfde      	ittt	le
 800155a:	2330      	movle	r3, #48	@ 0x30
 800155c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001560:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001564:	1b92      	subs	r2, r2, r6
 8001566:	6122      	str	r2, [r4, #16]
 8001568:	f8cd a000 	str.w	sl, [sp]
 800156c:	464b      	mov	r3, r9
 800156e:	aa03      	add	r2, sp, #12
 8001570:	4621      	mov	r1, r4
 8001572:	4640      	mov	r0, r8
 8001574:	f7ff fee6 	bl	8001344 <_printf_common>
 8001578:	3001      	adds	r0, #1
 800157a:	d14a      	bne.n	8001612 <_printf_i+0x1f2>
 800157c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001580:	b004      	add	sp, #16
 8001582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001586:	6823      	ldr	r3, [r4, #0]
 8001588:	f043 0320 	orr.w	r3, r3, #32
 800158c:	6023      	str	r3, [r4, #0]
 800158e:	4833      	ldr	r0, [pc, #204]	@ (800165c <_printf_i+0x23c>)
 8001590:	2778      	movs	r7, #120	@ 0x78
 8001592:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001596:	6823      	ldr	r3, [r4, #0]
 8001598:	6831      	ldr	r1, [r6, #0]
 800159a:	061f      	lsls	r7, r3, #24
 800159c:	f851 5b04 	ldr.w	r5, [r1], #4
 80015a0:	d402      	bmi.n	80015a8 <_printf_i+0x188>
 80015a2:	065f      	lsls	r7, r3, #25
 80015a4:	bf48      	it	mi
 80015a6:	b2ad      	uxthmi	r5, r5
 80015a8:	6031      	str	r1, [r6, #0]
 80015aa:	07d9      	lsls	r1, r3, #31
 80015ac:	bf44      	itt	mi
 80015ae:	f043 0320 	orrmi.w	r3, r3, #32
 80015b2:	6023      	strmi	r3, [r4, #0]
 80015b4:	b11d      	cbz	r5, 80015be <_printf_i+0x19e>
 80015b6:	2310      	movs	r3, #16
 80015b8:	e7ac      	b.n	8001514 <_printf_i+0xf4>
 80015ba:	4827      	ldr	r0, [pc, #156]	@ (8001658 <_printf_i+0x238>)
 80015bc:	e7e9      	b.n	8001592 <_printf_i+0x172>
 80015be:	6823      	ldr	r3, [r4, #0]
 80015c0:	f023 0320 	bic.w	r3, r3, #32
 80015c4:	6023      	str	r3, [r4, #0]
 80015c6:	e7f6      	b.n	80015b6 <_printf_i+0x196>
 80015c8:	4616      	mov	r6, r2
 80015ca:	e7bd      	b.n	8001548 <_printf_i+0x128>
 80015cc:	6833      	ldr	r3, [r6, #0]
 80015ce:	6825      	ldr	r5, [r4, #0]
 80015d0:	6961      	ldr	r1, [r4, #20]
 80015d2:	1d18      	adds	r0, r3, #4
 80015d4:	6030      	str	r0, [r6, #0]
 80015d6:	062e      	lsls	r6, r5, #24
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	d501      	bpl.n	80015e0 <_printf_i+0x1c0>
 80015dc:	6019      	str	r1, [r3, #0]
 80015de:	e002      	b.n	80015e6 <_printf_i+0x1c6>
 80015e0:	0668      	lsls	r0, r5, #25
 80015e2:	d5fb      	bpl.n	80015dc <_printf_i+0x1bc>
 80015e4:	8019      	strh	r1, [r3, #0]
 80015e6:	2300      	movs	r3, #0
 80015e8:	6123      	str	r3, [r4, #16]
 80015ea:	4616      	mov	r6, r2
 80015ec:	e7bc      	b.n	8001568 <_printf_i+0x148>
 80015ee:	6833      	ldr	r3, [r6, #0]
 80015f0:	1d1a      	adds	r2, r3, #4
 80015f2:	6032      	str	r2, [r6, #0]
 80015f4:	681e      	ldr	r6, [r3, #0]
 80015f6:	6862      	ldr	r2, [r4, #4]
 80015f8:	2100      	movs	r1, #0
 80015fa:	4630      	mov	r0, r6
 80015fc:	f7fe fdf0 	bl	80001e0 <memchr>
 8001600:	b108      	cbz	r0, 8001606 <_printf_i+0x1e6>
 8001602:	1b80      	subs	r0, r0, r6
 8001604:	6060      	str	r0, [r4, #4]
 8001606:	6863      	ldr	r3, [r4, #4]
 8001608:	6123      	str	r3, [r4, #16]
 800160a:	2300      	movs	r3, #0
 800160c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001610:	e7aa      	b.n	8001568 <_printf_i+0x148>
 8001612:	6923      	ldr	r3, [r4, #16]
 8001614:	4632      	mov	r2, r6
 8001616:	4649      	mov	r1, r9
 8001618:	4640      	mov	r0, r8
 800161a:	47d0      	blx	sl
 800161c:	3001      	adds	r0, #1
 800161e:	d0ad      	beq.n	800157c <_printf_i+0x15c>
 8001620:	6823      	ldr	r3, [r4, #0]
 8001622:	079b      	lsls	r3, r3, #30
 8001624:	d413      	bmi.n	800164e <_printf_i+0x22e>
 8001626:	68e0      	ldr	r0, [r4, #12]
 8001628:	9b03      	ldr	r3, [sp, #12]
 800162a:	4298      	cmp	r0, r3
 800162c:	bfb8      	it	lt
 800162e:	4618      	movlt	r0, r3
 8001630:	e7a6      	b.n	8001580 <_printf_i+0x160>
 8001632:	2301      	movs	r3, #1
 8001634:	4632      	mov	r2, r6
 8001636:	4649      	mov	r1, r9
 8001638:	4640      	mov	r0, r8
 800163a:	47d0      	blx	sl
 800163c:	3001      	adds	r0, #1
 800163e:	d09d      	beq.n	800157c <_printf_i+0x15c>
 8001640:	3501      	adds	r5, #1
 8001642:	68e3      	ldr	r3, [r4, #12]
 8001644:	9903      	ldr	r1, [sp, #12]
 8001646:	1a5b      	subs	r3, r3, r1
 8001648:	42ab      	cmp	r3, r5
 800164a:	dcf2      	bgt.n	8001632 <_printf_i+0x212>
 800164c:	e7eb      	b.n	8001626 <_printf_i+0x206>
 800164e:	2500      	movs	r5, #0
 8001650:	f104 0619 	add.w	r6, r4, #25
 8001654:	e7f5      	b.n	8001642 <_printf_i+0x222>
 8001656:	bf00      	nop
 8001658:	08001d65 	.word	0x08001d65
 800165c:	08001d76 	.word	0x08001d76

08001660 <_scanf_chars>:
 8001660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001664:	4615      	mov	r5, r2
 8001666:	688a      	ldr	r2, [r1, #8]
 8001668:	4680      	mov	r8, r0
 800166a:	460c      	mov	r4, r1
 800166c:	b932      	cbnz	r2, 800167c <_scanf_chars+0x1c>
 800166e:	698a      	ldr	r2, [r1, #24]
 8001670:	2a00      	cmp	r2, #0
 8001672:	bf14      	ite	ne
 8001674:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8001678:	2201      	moveq	r2, #1
 800167a:	608a      	str	r2, [r1, #8]
 800167c:	6822      	ldr	r2, [r4, #0]
 800167e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8001710 <_scanf_chars+0xb0>
 8001682:	06d1      	lsls	r1, r2, #27
 8001684:	bf5f      	itttt	pl
 8001686:	681a      	ldrpl	r2, [r3, #0]
 8001688:	1d11      	addpl	r1, r2, #4
 800168a:	6019      	strpl	r1, [r3, #0]
 800168c:	6816      	ldrpl	r6, [r2, #0]
 800168e:	2700      	movs	r7, #0
 8001690:	69a0      	ldr	r0, [r4, #24]
 8001692:	b188      	cbz	r0, 80016b8 <_scanf_chars+0x58>
 8001694:	2801      	cmp	r0, #1
 8001696:	d107      	bne.n	80016a8 <_scanf_chars+0x48>
 8001698:	682b      	ldr	r3, [r5, #0]
 800169a:	781a      	ldrb	r2, [r3, #0]
 800169c:	6963      	ldr	r3, [r4, #20]
 800169e:	5c9b      	ldrb	r3, [r3, r2]
 80016a0:	b953      	cbnz	r3, 80016b8 <_scanf_chars+0x58>
 80016a2:	2f00      	cmp	r7, #0
 80016a4:	d031      	beq.n	800170a <_scanf_chars+0xaa>
 80016a6:	e022      	b.n	80016ee <_scanf_chars+0x8e>
 80016a8:	2802      	cmp	r0, #2
 80016aa:	d120      	bne.n	80016ee <_scanf_chars+0x8e>
 80016ac:	682b      	ldr	r3, [r5, #0]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80016b4:	071b      	lsls	r3, r3, #28
 80016b6:	d41a      	bmi.n	80016ee <_scanf_chars+0x8e>
 80016b8:	6823      	ldr	r3, [r4, #0]
 80016ba:	06da      	lsls	r2, r3, #27
 80016bc:	bf5e      	ittt	pl
 80016be:	682b      	ldrpl	r3, [r5, #0]
 80016c0:	781b      	ldrbpl	r3, [r3, #0]
 80016c2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80016c6:	682a      	ldr	r2, [r5, #0]
 80016c8:	686b      	ldr	r3, [r5, #4]
 80016ca:	3201      	adds	r2, #1
 80016cc:	602a      	str	r2, [r5, #0]
 80016ce:	68a2      	ldr	r2, [r4, #8]
 80016d0:	3b01      	subs	r3, #1
 80016d2:	3a01      	subs	r2, #1
 80016d4:	606b      	str	r3, [r5, #4]
 80016d6:	3701      	adds	r7, #1
 80016d8:	60a2      	str	r2, [r4, #8]
 80016da:	b142      	cbz	r2, 80016ee <_scanf_chars+0x8e>
 80016dc:	2b00      	cmp	r3, #0
 80016de:	dcd7      	bgt.n	8001690 <_scanf_chars+0x30>
 80016e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80016e4:	4629      	mov	r1, r5
 80016e6:	4640      	mov	r0, r8
 80016e8:	4798      	blx	r3
 80016ea:	2800      	cmp	r0, #0
 80016ec:	d0d0      	beq.n	8001690 <_scanf_chars+0x30>
 80016ee:	6823      	ldr	r3, [r4, #0]
 80016f0:	f013 0310 	ands.w	r3, r3, #16
 80016f4:	d105      	bne.n	8001702 <_scanf_chars+0xa2>
 80016f6:	68e2      	ldr	r2, [r4, #12]
 80016f8:	3201      	adds	r2, #1
 80016fa:	60e2      	str	r2, [r4, #12]
 80016fc:	69a2      	ldr	r2, [r4, #24]
 80016fe:	b102      	cbz	r2, 8001702 <_scanf_chars+0xa2>
 8001700:	7033      	strb	r3, [r6, #0]
 8001702:	6923      	ldr	r3, [r4, #16]
 8001704:	443b      	add	r3, r7
 8001706:	6123      	str	r3, [r4, #16]
 8001708:	2000      	movs	r0, #0
 800170a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800170e:	bf00      	nop
 8001710:	08001da3 	.word	0x08001da3

08001714 <_scanf_i>:
 8001714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001718:	4698      	mov	r8, r3
 800171a:	4b74      	ldr	r3, [pc, #464]	@ (80018ec <_scanf_i+0x1d8>)
 800171c:	460c      	mov	r4, r1
 800171e:	4682      	mov	sl, r0
 8001720:	4616      	mov	r6, r2
 8001722:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001726:	b087      	sub	sp, #28
 8001728:	ab03      	add	r3, sp, #12
 800172a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800172e:	4b70      	ldr	r3, [pc, #448]	@ (80018f0 <_scanf_i+0x1dc>)
 8001730:	69a1      	ldr	r1, [r4, #24]
 8001732:	4a70      	ldr	r2, [pc, #448]	@ (80018f4 <_scanf_i+0x1e0>)
 8001734:	2903      	cmp	r1, #3
 8001736:	bf08      	it	eq
 8001738:	461a      	moveq	r2, r3
 800173a:	68a3      	ldr	r3, [r4, #8]
 800173c:	9201      	str	r2, [sp, #4]
 800173e:	1e5a      	subs	r2, r3, #1
 8001740:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8001744:	bf88      	it	hi
 8001746:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800174a:	4627      	mov	r7, r4
 800174c:	bf82      	ittt	hi
 800174e:	eb03 0905 	addhi.w	r9, r3, r5
 8001752:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8001756:	60a3      	strhi	r3, [r4, #8]
 8001758:	f857 3b1c 	ldr.w	r3, [r7], #28
 800175c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8001760:	bf98      	it	ls
 8001762:	f04f 0900 	movls.w	r9, #0
 8001766:	6023      	str	r3, [r4, #0]
 8001768:	463d      	mov	r5, r7
 800176a:	f04f 0b00 	mov.w	fp, #0
 800176e:	6831      	ldr	r1, [r6, #0]
 8001770:	ab03      	add	r3, sp, #12
 8001772:	7809      	ldrb	r1, [r1, #0]
 8001774:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8001778:	2202      	movs	r2, #2
 800177a:	f7fe fd31 	bl	80001e0 <memchr>
 800177e:	b328      	cbz	r0, 80017cc <_scanf_i+0xb8>
 8001780:	f1bb 0f01 	cmp.w	fp, #1
 8001784:	d159      	bne.n	800183a <_scanf_i+0x126>
 8001786:	6862      	ldr	r2, [r4, #4]
 8001788:	b92a      	cbnz	r2, 8001796 <_scanf_i+0x82>
 800178a:	6822      	ldr	r2, [r4, #0]
 800178c:	2108      	movs	r1, #8
 800178e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001792:	6061      	str	r1, [r4, #4]
 8001794:	6022      	str	r2, [r4, #0]
 8001796:	6822      	ldr	r2, [r4, #0]
 8001798:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800179c:	6022      	str	r2, [r4, #0]
 800179e:	68a2      	ldr	r2, [r4, #8]
 80017a0:	1e51      	subs	r1, r2, #1
 80017a2:	60a1      	str	r1, [r4, #8]
 80017a4:	b192      	cbz	r2, 80017cc <_scanf_i+0xb8>
 80017a6:	6832      	ldr	r2, [r6, #0]
 80017a8:	1c51      	adds	r1, r2, #1
 80017aa:	6031      	str	r1, [r6, #0]
 80017ac:	7812      	ldrb	r2, [r2, #0]
 80017ae:	f805 2b01 	strb.w	r2, [r5], #1
 80017b2:	6872      	ldr	r2, [r6, #4]
 80017b4:	3a01      	subs	r2, #1
 80017b6:	2a00      	cmp	r2, #0
 80017b8:	6072      	str	r2, [r6, #4]
 80017ba:	dc07      	bgt.n	80017cc <_scanf_i+0xb8>
 80017bc:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80017c0:	4631      	mov	r1, r6
 80017c2:	4650      	mov	r0, sl
 80017c4:	4790      	blx	r2
 80017c6:	2800      	cmp	r0, #0
 80017c8:	f040 8085 	bne.w	80018d6 <_scanf_i+0x1c2>
 80017cc:	f10b 0b01 	add.w	fp, fp, #1
 80017d0:	f1bb 0f03 	cmp.w	fp, #3
 80017d4:	d1cb      	bne.n	800176e <_scanf_i+0x5a>
 80017d6:	6863      	ldr	r3, [r4, #4]
 80017d8:	b90b      	cbnz	r3, 80017de <_scanf_i+0xca>
 80017da:	230a      	movs	r3, #10
 80017dc:	6063      	str	r3, [r4, #4]
 80017de:	6863      	ldr	r3, [r4, #4]
 80017e0:	4945      	ldr	r1, [pc, #276]	@ (80018f8 <_scanf_i+0x1e4>)
 80017e2:	6960      	ldr	r0, [r4, #20]
 80017e4:	1ac9      	subs	r1, r1, r3
 80017e6:	f000 f889 	bl	80018fc <__sccl>
 80017ea:	f04f 0b00 	mov.w	fp, #0
 80017ee:	68a3      	ldr	r3, [r4, #8]
 80017f0:	6822      	ldr	r2, [r4, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d03d      	beq.n	8001872 <_scanf_i+0x15e>
 80017f6:	6831      	ldr	r1, [r6, #0]
 80017f8:	6960      	ldr	r0, [r4, #20]
 80017fa:	f891 c000 	ldrb.w	ip, [r1]
 80017fe:	f810 000c 	ldrb.w	r0, [r0, ip]
 8001802:	2800      	cmp	r0, #0
 8001804:	d035      	beq.n	8001872 <_scanf_i+0x15e>
 8001806:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800180a:	d124      	bne.n	8001856 <_scanf_i+0x142>
 800180c:	0510      	lsls	r0, r2, #20
 800180e:	d522      	bpl.n	8001856 <_scanf_i+0x142>
 8001810:	f10b 0b01 	add.w	fp, fp, #1
 8001814:	f1b9 0f00 	cmp.w	r9, #0
 8001818:	d003      	beq.n	8001822 <_scanf_i+0x10e>
 800181a:	3301      	adds	r3, #1
 800181c:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8001820:	60a3      	str	r3, [r4, #8]
 8001822:	6873      	ldr	r3, [r6, #4]
 8001824:	3b01      	subs	r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	6073      	str	r3, [r6, #4]
 800182a:	dd1b      	ble.n	8001864 <_scanf_i+0x150>
 800182c:	6833      	ldr	r3, [r6, #0]
 800182e:	3301      	adds	r3, #1
 8001830:	6033      	str	r3, [r6, #0]
 8001832:	68a3      	ldr	r3, [r4, #8]
 8001834:	3b01      	subs	r3, #1
 8001836:	60a3      	str	r3, [r4, #8]
 8001838:	e7d9      	b.n	80017ee <_scanf_i+0xda>
 800183a:	f1bb 0f02 	cmp.w	fp, #2
 800183e:	d1ae      	bne.n	800179e <_scanf_i+0x8a>
 8001840:	6822      	ldr	r2, [r4, #0]
 8001842:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8001846:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800184a:	d1bf      	bne.n	80017cc <_scanf_i+0xb8>
 800184c:	2110      	movs	r1, #16
 800184e:	6061      	str	r1, [r4, #4]
 8001850:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001854:	e7a2      	b.n	800179c <_scanf_i+0x88>
 8001856:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800185a:	6022      	str	r2, [r4, #0]
 800185c:	780b      	ldrb	r3, [r1, #0]
 800185e:	f805 3b01 	strb.w	r3, [r5], #1
 8001862:	e7de      	b.n	8001822 <_scanf_i+0x10e>
 8001864:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8001868:	4631      	mov	r1, r6
 800186a:	4650      	mov	r0, sl
 800186c:	4798      	blx	r3
 800186e:	2800      	cmp	r0, #0
 8001870:	d0df      	beq.n	8001832 <_scanf_i+0x11e>
 8001872:	6823      	ldr	r3, [r4, #0]
 8001874:	05d9      	lsls	r1, r3, #23
 8001876:	d50d      	bpl.n	8001894 <_scanf_i+0x180>
 8001878:	42bd      	cmp	r5, r7
 800187a:	d909      	bls.n	8001890 <_scanf_i+0x17c>
 800187c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8001880:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8001884:	4632      	mov	r2, r6
 8001886:	4650      	mov	r0, sl
 8001888:	4798      	blx	r3
 800188a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800188e:	464d      	mov	r5, r9
 8001890:	42bd      	cmp	r5, r7
 8001892:	d028      	beq.n	80018e6 <_scanf_i+0x1d2>
 8001894:	6822      	ldr	r2, [r4, #0]
 8001896:	f012 0210 	ands.w	r2, r2, #16
 800189a:	d113      	bne.n	80018c4 <_scanf_i+0x1b0>
 800189c:	702a      	strb	r2, [r5, #0]
 800189e:	6863      	ldr	r3, [r4, #4]
 80018a0:	9e01      	ldr	r6, [sp, #4]
 80018a2:	4639      	mov	r1, r7
 80018a4:	4650      	mov	r0, sl
 80018a6:	47b0      	blx	r6
 80018a8:	f8d8 3000 	ldr.w	r3, [r8]
 80018ac:	6821      	ldr	r1, [r4, #0]
 80018ae:	1d1a      	adds	r2, r3, #4
 80018b0:	f8c8 2000 	str.w	r2, [r8]
 80018b4:	f011 0f20 	tst.w	r1, #32
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	d00f      	beq.n	80018dc <_scanf_i+0x1c8>
 80018bc:	6018      	str	r0, [r3, #0]
 80018be:	68e3      	ldr	r3, [r4, #12]
 80018c0:	3301      	adds	r3, #1
 80018c2:	60e3      	str	r3, [r4, #12]
 80018c4:	6923      	ldr	r3, [r4, #16]
 80018c6:	1bed      	subs	r5, r5, r7
 80018c8:	445d      	add	r5, fp
 80018ca:	442b      	add	r3, r5
 80018cc:	6123      	str	r3, [r4, #16]
 80018ce:	2000      	movs	r0, #0
 80018d0:	b007      	add	sp, #28
 80018d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018d6:	f04f 0b00 	mov.w	fp, #0
 80018da:	e7ca      	b.n	8001872 <_scanf_i+0x15e>
 80018dc:	07ca      	lsls	r2, r1, #31
 80018de:	bf4c      	ite	mi
 80018e0:	8018      	strhmi	r0, [r3, #0]
 80018e2:	6018      	strpl	r0, [r3, #0]
 80018e4:	e7eb      	b.n	80018be <_scanf_i+0x1aa>
 80018e6:	2001      	movs	r0, #1
 80018e8:	e7f2      	b.n	80018d0 <_scanf_i+0x1bc>
 80018ea:	bf00      	nop
 80018ec:	08001d48 	.word	0x08001d48
 80018f0:	08001ba5 	.word	0x08001ba5
 80018f4:	08001c85 	.word	0x08001c85
 80018f8:	08001d97 	.word	0x08001d97

080018fc <__sccl>:
 80018fc:	b570      	push	{r4, r5, r6, lr}
 80018fe:	780b      	ldrb	r3, [r1, #0]
 8001900:	4604      	mov	r4, r0
 8001902:	2b5e      	cmp	r3, #94	@ 0x5e
 8001904:	bf0b      	itete	eq
 8001906:	784b      	ldrbeq	r3, [r1, #1]
 8001908:	1c4a      	addne	r2, r1, #1
 800190a:	1c8a      	addeq	r2, r1, #2
 800190c:	2100      	movne	r1, #0
 800190e:	bf08      	it	eq
 8001910:	2101      	moveq	r1, #1
 8001912:	3801      	subs	r0, #1
 8001914:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8001918:	f800 1f01 	strb.w	r1, [r0, #1]!
 800191c:	42a8      	cmp	r0, r5
 800191e:	d1fb      	bne.n	8001918 <__sccl+0x1c>
 8001920:	b90b      	cbnz	r3, 8001926 <__sccl+0x2a>
 8001922:	1e50      	subs	r0, r2, #1
 8001924:	bd70      	pop	{r4, r5, r6, pc}
 8001926:	f081 0101 	eor.w	r1, r1, #1
 800192a:	54e1      	strb	r1, [r4, r3]
 800192c:	4610      	mov	r0, r2
 800192e:	4602      	mov	r2, r0
 8001930:	f812 5b01 	ldrb.w	r5, [r2], #1
 8001934:	2d2d      	cmp	r5, #45	@ 0x2d
 8001936:	d005      	beq.n	8001944 <__sccl+0x48>
 8001938:	2d5d      	cmp	r5, #93	@ 0x5d
 800193a:	d016      	beq.n	800196a <__sccl+0x6e>
 800193c:	2d00      	cmp	r5, #0
 800193e:	d0f1      	beq.n	8001924 <__sccl+0x28>
 8001940:	462b      	mov	r3, r5
 8001942:	e7f2      	b.n	800192a <__sccl+0x2e>
 8001944:	7846      	ldrb	r6, [r0, #1]
 8001946:	2e5d      	cmp	r6, #93	@ 0x5d
 8001948:	d0fa      	beq.n	8001940 <__sccl+0x44>
 800194a:	42b3      	cmp	r3, r6
 800194c:	dcf8      	bgt.n	8001940 <__sccl+0x44>
 800194e:	3002      	adds	r0, #2
 8001950:	461a      	mov	r2, r3
 8001952:	3201      	adds	r2, #1
 8001954:	4296      	cmp	r6, r2
 8001956:	54a1      	strb	r1, [r4, r2]
 8001958:	dcfb      	bgt.n	8001952 <__sccl+0x56>
 800195a:	1af2      	subs	r2, r6, r3
 800195c:	3a01      	subs	r2, #1
 800195e:	1c5d      	adds	r5, r3, #1
 8001960:	42b3      	cmp	r3, r6
 8001962:	bfa8      	it	ge
 8001964:	2200      	movge	r2, #0
 8001966:	18ab      	adds	r3, r5, r2
 8001968:	e7e1      	b.n	800192e <__sccl+0x32>
 800196a:	4610      	mov	r0, r2
 800196c:	e7da      	b.n	8001924 <__sccl+0x28>

0800196e <__submore>:
 800196e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001972:	460c      	mov	r4, r1
 8001974:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8001976:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800197a:	4299      	cmp	r1, r3
 800197c:	d11d      	bne.n	80019ba <__submore+0x4c>
 800197e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001982:	f7ff f92f 	bl	8000be4 <_malloc_r>
 8001986:	b918      	cbnz	r0, 8001990 <__submore+0x22>
 8001988:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800198c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001990:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001994:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001996:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800199a:	6360      	str	r0, [r4, #52]	@ 0x34
 800199c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80019a0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80019a4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80019a8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80019ac:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80019b0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80019b4:	6020      	str	r0, [r4, #0]
 80019b6:	2000      	movs	r0, #0
 80019b8:	e7e8      	b.n	800198c <__submore+0x1e>
 80019ba:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80019bc:	0077      	lsls	r7, r6, #1
 80019be:	463a      	mov	r2, r7
 80019c0:	f000 f848 	bl	8001a54 <_realloc_r>
 80019c4:	4605      	mov	r5, r0
 80019c6:	2800      	cmp	r0, #0
 80019c8:	d0de      	beq.n	8001988 <__submore+0x1a>
 80019ca:	eb00 0806 	add.w	r8, r0, r6
 80019ce:	4601      	mov	r1, r0
 80019d0:	4632      	mov	r2, r6
 80019d2:	4640      	mov	r0, r8
 80019d4:	f000 f830 	bl	8001a38 <memcpy>
 80019d8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80019dc:	f8c4 8000 	str.w	r8, [r4]
 80019e0:	e7e9      	b.n	80019b6 <__submore+0x48>

080019e2 <memmove>:
 80019e2:	4288      	cmp	r0, r1
 80019e4:	b510      	push	{r4, lr}
 80019e6:	eb01 0402 	add.w	r4, r1, r2
 80019ea:	d902      	bls.n	80019f2 <memmove+0x10>
 80019ec:	4284      	cmp	r4, r0
 80019ee:	4623      	mov	r3, r4
 80019f0:	d807      	bhi.n	8001a02 <memmove+0x20>
 80019f2:	1e43      	subs	r3, r0, #1
 80019f4:	42a1      	cmp	r1, r4
 80019f6:	d008      	beq.n	8001a0a <memmove+0x28>
 80019f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80019fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001a00:	e7f8      	b.n	80019f4 <memmove+0x12>
 8001a02:	4402      	add	r2, r0
 8001a04:	4601      	mov	r1, r0
 8001a06:	428a      	cmp	r2, r1
 8001a08:	d100      	bne.n	8001a0c <memmove+0x2a>
 8001a0a:	bd10      	pop	{r4, pc}
 8001a0c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001a10:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001a14:	e7f7      	b.n	8001a06 <memmove+0x24>
	...

08001a18 <_sbrk_r>:
 8001a18:	b538      	push	{r3, r4, r5, lr}
 8001a1a:	4d06      	ldr	r5, [pc, #24]	@ (8001a34 <_sbrk_r+0x1c>)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	4604      	mov	r4, r0
 8001a20:	4608      	mov	r0, r1
 8001a22:	602b      	str	r3, [r5, #0]
 8001a24:	f7fe fe88 	bl	8000738 <_sbrk>
 8001a28:	1c43      	adds	r3, r0, #1
 8001a2a:	d102      	bne.n	8001a32 <_sbrk_r+0x1a>
 8001a2c:	682b      	ldr	r3, [r5, #0]
 8001a2e:	b103      	cbz	r3, 8001a32 <_sbrk_r+0x1a>
 8001a30:	6023      	str	r3, [r4, #0]
 8001a32:	bd38      	pop	{r3, r4, r5, pc}
 8001a34:	200001ac 	.word	0x200001ac

08001a38 <memcpy>:
 8001a38:	440a      	add	r2, r1
 8001a3a:	4291      	cmp	r1, r2
 8001a3c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001a40:	d100      	bne.n	8001a44 <memcpy+0xc>
 8001a42:	4770      	bx	lr
 8001a44:	b510      	push	{r4, lr}
 8001a46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001a4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001a4e:	4291      	cmp	r1, r2
 8001a50:	d1f9      	bne.n	8001a46 <memcpy+0xe>
 8001a52:	bd10      	pop	{r4, pc}

08001a54 <_realloc_r>:
 8001a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a58:	4680      	mov	r8, r0
 8001a5a:	4615      	mov	r5, r2
 8001a5c:	460c      	mov	r4, r1
 8001a5e:	b921      	cbnz	r1, 8001a6a <_realloc_r+0x16>
 8001a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a64:	4611      	mov	r1, r2
 8001a66:	f7ff b8bd 	b.w	8000be4 <_malloc_r>
 8001a6a:	b92a      	cbnz	r2, 8001a78 <_realloc_r+0x24>
 8001a6c:	f7ff f84e 	bl	8000b0c <_free_r>
 8001a70:	2400      	movs	r4, #0
 8001a72:	4620      	mov	r0, r4
 8001a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a78:	f000 f906 	bl	8001c88 <_malloc_usable_size_r>
 8001a7c:	4285      	cmp	r5, r0
 8001a7e:	4606      	mov	r6, r0
 8001a80:	d802      	bhi.n	8001a88 <_realloc_r+0x34>
 8001a82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001a86:	d8f4      	bhi.n	8001a72 <_realloc_r+0x1e>
 8001a88:	4629      	mov	r1, r5
 8001a8a:	4640      	mov	r0, r8
 8001a8c:	f7ff f8aa 	bl	8000be4 <_malloc_r>
 8001a90:	4607      	mov	r7, r0
 8001a92:	2800      	cmp	r0, #0
 8001a94:	d0ec      	beq.n	8001a70 <_realloc_r+0x1c>
 8001a96:	42b5      	cmp	r5, r6
 8001a98:	462a      	mov	r2, r5
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	bf28      	it	cs
 8001a9e:	4632      	movcs	r2, r6
 8001aa0:	f7ff ffca 	bl	8001a38 <memcpy>
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	4640      	mov	r0, r8
 8001aa8:	f7ff f830 	bl	8000b0c <_free_r>
 8001aac:	463c      	mov	r4, r7
 8001aae:	e7e0      	b.n	8001a72 <_realloc_r+0x1e>

08001ab0 <_strtol_l.constprop.0>:
 8001ab0:	2b24      	cmp	r3, #36	@ 0x24
 8001ab2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ab6:	4686      	mov	lr, r0
 8001ab8:	4690      	mov	r8, r2
 8001aba:	d801      	bhi.n	8001ac0 <_strtol_l.constprop.0+0x10>
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d106      	bne.n	8001ace <_strtol_l.constprop.0+0x1e>
 8001ac0:	f7fe fff8 	bl	8000ab4 <__errno>
 8001ac4:	2316      	movs	r3, #22
 8001ac6:	6003      	str	r3, [r0, #0]
 8001ac8:	2000      	movs	r0, #0
 8001aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ace:	4834      	ldr	r0, [pc, #208]	@ (8001ba0 <_strtol_l.constprop.0+0xf0>)
 8001ad0:	460d      	mov	r5, r1
 8001ad2:	462a      	mov	r2, r5
 8001ad4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001ad8:	5d06      	ldrb	r6, [r0, r4]
 8001ada:	f016 0608 	ands.w	r6, r6, #8
 8001ade:	d1f8      	bne.n	8001ad2 <_strtol_l.constprop.0+0x22>
 8001ae0:	2c2d      	cmp	r4, #45	@ 0x2d
 8001ae2:	d12d      	bne.n	8001b40 <_strtol_l.constprop.0+0x90>
 8001ae4:	782c      	ldrb	r4, [r5, #0]
 8001ae6:	2601      	movs	r6, #1
 8001ae8:	1c95      	adds	r5, r2, #2
 8001aea:	f033 0210 	bics.w	r2, r3, #16
 8001aee:	d109      	bne.n	8001b04 <_strtol_l.constprop.0+0x54>
 8001af0:	2c30      	cmp	r4, #48	@ 0x30
 8001af2:	d12a      	bne.n	8001b4a <_strtol_l.constprop.0+0x9a>
 8001af4:	782a      	ldrb	r2, [r5, #0]
 8001af6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8001afa:	2a58      	cmp	r2, #88	@ 0x58
 8001afc:	d125      	bne.n	8001b4a <_strtol_l.constprop.0+0x9a>
 8001afe:	786c      	ldrb	r4, [r5, #1]
 8001b00:	2310      	movs	r3, #16
 8001b02:	3502      	adds	r5, #2
 8001b04:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8001b08:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	fbbc f9f3 	udiv	r9, ip, r3
 8001b12:	4610      	mov	r0, r2
 8001b14:	fb03 ca19 	mls	sl, r3, r9, ip
 8001b18:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8001b1c:	2f09      	cmp	r7, #9
 8001b1e:	d81b      	bhi.n	8001b58 <_strtol_l.constprop.0+0xa8>
 8001b20:	463c      	mov	r4, r7
 8001b22:	42a3      	cmp	r3, r4
 8001b24:	dd27      	ble.n	8001b76 <_strtol_l.constprop.0+0xc6>
 8001b26:	1c57      	adds	r7, r2, #1
 8001b28:	d007      	beq.n	8001b3a <_strtol_l.constprop.0+0x8a>
 8001b2a:	4581      	cmp	r9, r0
 8001b2c:	d320      	bcc.n	8001b70 <_strtol_l.constprop.0+0xc0>
 8001b2e:	d101      	bne.n	8001b34 <_strtol_l.constprop.0+0x84>
 8001b30:	45a2      	cmp	sl, r4
 8001b32:	db1d      	blt.n	8001b70 <_strtol_l.constprop.0+0xc0>
 8001b34:	fb00 4003 	mla	r0, r0, r3, r4
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001b3e:	e7eb      	b.n	8001b18 <_strtol_l.constprop.0+0x68>
 8001b40:	2c2b      	cmp	r4, #43	@ 0x2b
 8001b42:	bf04      	itt	eq
 8001b44:	782c      	ldrbeq	r4, [r5, #0]
 8001b46:	1c95      	addeq	r5, r2, #2
 8001b48:	e7cf      	b.n	8001aea <_strtol_l.constprop.0+0x3a>
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1da      	bne.n	8001b04 <_strtol_l.constprop.0+0x54>
 8001b4e:	2c30      	cmp	r4, #48	@ 0x30
 8001b50:	bf0c      	ite	eq
 8001b52:	2308      	moveq	r3, #8
 8001b54:	230a      	movne	r3, #10
 8001b56:	e7d5      	b.n	8001b04 <_strtol_l.constprop.0+0x54>
 8001b58:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8001b5c:	2f19      	cmp	r7, #25
 8001b5e:	d801      	bhi.n	8001b64 <_strtol_l.constprop.0+0xb4>
 8001b60:	3c37      	subs	r4, #55	@ 0x37
 8001b62:	e7de      	b.n	8001b22 <_strtol_l.constprop.0+0x72>
 8001b64:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8001b68:	2f19      	cmp	r7, #25
 8001b6a:	d804      	bhi.n	8001b76 <_strtol_l.constprop.0+0xc6>
 8001b6c:	3c57      	subs	r4, #87	@ 0x57
 8001b6e:	e7d8      	b.n	8001b22 <_strtol_l.constprop.0+0x72>
 8001b70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b74:	e7e1      	b.n	8001b3a <_strtol_l.constprop.0+0x8a>
 8001b76:	1c53      	adds	r3, r2, #1
 8001b78:	d108      	bne.n	8001b8c <_strtol_l.constprop.0+0xdc>
 8001b7a:	2322      	movs	r3, #34	@ 0x22
 8001b7c:	f8ce 3000 	str.w	r3, [lr]
 8001b80:	4660      	mov	r0, ip
 8001b82:	f1b8 0f00 	cmp.w	r8, #0
 8001b86:	d0a0      	beq.n	8001aca <_strtol_l.constprop.0+0x1a>
 8001b88:	1e69      	subs	r1, r5, #1
 8001b8a:	e006      	b.n	8001b9a <_strtol_l.constprop.0+0xea>
 8001b8c:	b106      	cbz	r6, 8001b90 <_strtol_l.constprop.0+0xe0>
 8001b8e:	4240      	negs	r0, r0
 8001b90:	f1b8 0f00 	cmp.w	r8, #0
 8001b94:	d099      	beq.n	8001aca <_strtol_l.constprop.0+0x1a>
 8001b96:	2a00      	cmp	r2, #0
 8001b98:	d1f6      	bne.n	8001b88 <_strtol_l.constprop.0+0xd8>
 8001b9a:	f8c8 1000 	str.w	r1, [r8]
 8001b9e:	e794      	b.n	8001aca <_strtol_l.constprop.0+0x1a>
 8001ba0:	08001da3 	.word	0x08001da3

08001ba4 <_strtol_r>:
 8001ba4:	f7ff bf84 	b.w	8001ab0 <_strtol_l.constprop.0>

08001ba8 <_strtoul_l.constprop.0>:
 8001ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bac:	4e34      	ldr	r6, [pc, #208]	@ (8001c80 <_strtoul_l.constprop.0+0xd8>)
 8001bae:	4686      	mov	lr, r0
 8001bb0:	460d      	mov	r5, r1
 8001bb2:	4628      	mov	r0, r5
 8001bb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001bb8:	5d37      	ldrb	r7, [r6, r4]
 8001bba:	f017 0708 	ands.w	r7, r7, #8
 8001bbe:	d1f8      	bne.n	8001bb2 <_strtoul_l.constprop.0+0xa>
 8001bc0:	2c2d      	cmp	r4, #45	@ 0x2d
 8001bc2:	d12f      	bne.n	8001c24 <_strtoul_l.constprop.0+0x7c>
 8001bc4:	782c      	ldrb	r4, [r5, #0]
 8001bc6:	2701      	movs	r7, #1
 8001bc8:	1c85      	adds	r5, r0, #2
 8001bca:	f033 0010 	bics.w	r0, r3, #16
 8001bce:	d109      	bne.n	8001be4 <_strtoul_l.constprop.0+0x3c>
 8001bd0:	2c30      	cmp	r4, #48	@ 0x30
 8001bd2:	d12c      	bne.n	8001c2e <_strtoul_l.constprop.0+0x86>
 8001bd4:	7828      	ldrb	r0, [r5, #0]
 8001bd6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8001bda:	2858      	cmp	r0, #88	@ 0x58
 8001bdc:	d127      	bne.n	8001c2e <_strtoul_l.constprop.0+0x86>
 8001bde:	786c      	ldrb	r4, [r5, #1]
 8001be0:	2310      	movs	r3, #16
 8001be2:	3502      	adds	r5, #2
 8001be4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8001be8:	2600      	movs	r6, #0
 8001bea:	fbb8 f8f3 	udiv	r8, r8, r3
 8001bee:	fb03 f908 	mul.w	r9, r3, r8
 8001bf2:	ea6f 0909 	mvn.w	r9, r9
 8001bf6:	4630      	mov	r0, r6
 8001bf8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8001bfc:	f1bc 0f09 	cmp.w	ip, #9
 8001c00:	d81c      	bhi.n	8001c3c <_strtoul_l.constprop.0+0x94>
 8001c02:	4664      	mov	r4, ip
 8001c04:	42a3      	cmp	r3, r4
 8001c06:	dd2a      	ble.n	8001c5e <_strtoul_l.constprop.0+0xb6>
 8001c08:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8001c0c:	d007      	beq.n	8001c1e <_strtoul_l.constprop.0+0x76>
 8001c0e:	4580      	cmp	r8, r0
 8001c10:	d322      	bcc.n	8001c58 <_strtoul_l.constprop.0+0xb0>
 8001c12:	d101      	bne.n	8001c18 <_strtoul_l.constprop.0+0x70>
 8001c14:	45a1      	cmp	r9, r4
 8001c16:	db1f      	blt.n	8001c58 <_strtoul_l.constprop.0+0xb0>
 8001c18:	fb00 4003 	mla	r0, r0, r3, r4
 8001c1c:	2601      	movs	r6, #1
 8001c1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001c22:	e7e9      	b.n	8001bf8 <_strtoul_l.constprop.0+0x50>
 8001c24:	2c2b      	cmp	r4, #43	@ 0x2b
 8001c26:	bf04      	itt	eq
 8001c28:	782c      	ldrbeq	r4, [r5, #0]
 8001c2a:	1c85      	addeq	r5, r0, #2
 8001c2c:	e7cd      	b.n	8001bca <_strtoul_l.constprop.0+0x22>
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1d8      	bne.n	8001be4 <_strtoul_l.constprop.0+0x3c>
 8001c32:	2c30      	cmp	r4, #48	@ 0x30
 8001c34:	bf0c      	ite	eq
 8001c36:	2308      	moveq	r3, #8
 8001c38:	230a      	movne	r3, #10
 8001c3a:	e7d3      	b.n	8001be4 <_strtoul_l.constprop.0+0x3c>
 8001c3c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8001c40:	f1bc 0f19 	cmp.w	ip, #25
 8001c44:	d801      	bhi.n	8001c4a <_strtoul_l.constprop.0+0xa2>
 8001c46:	3c37      	subs	r4, #55	@ 0x37
 8001c48:	e7dc      	b.n	8001c04 <_strtoul_l.constprop.0+0x5c>
 8001c4a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8001c4e:	f1bc 0f19 	cmp.w	ip, #25
 8001c52:	d804      	bhi.n	8001c5e <_strtoul_l.constprop.0+0xb6>
 8001c54:	3c57      	subs	r4, #87	@ 0x57
 8001c56:	e7d5      	b.n	8001c04 <_strtoul_l.constprop.0+0x5c>
 8001c58:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8001c5c:	e7df      	b.n	8001c1e <_strtoul_l.constprop.0+0x76>
 8001c5e:	1c73      	adds	r3, r6, #1
 8001c60:	d106      	bne.n	8001c70 <_strtoul_l.constprop.0+0xc8>
 8001c62:	2322      	movs	r3, #34	@ 0x22
 8001c64:	f8ce 3000 	str.w	r3, [lr]
 8001c68:	4630      	mov	r0, r6
 8001c6a:	b932      	cbnz	r2, 8001c7a <_strtoul_l.constprop.0+0xd2>
 8001c6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c70:	b107      	cbz	r7, 8001c74 <_strtoul_l.constprop.0+0xcc>
 8001c72:	4240      	negs	r0, r0
 8001c74:	2a00      	cmp	r2, #0
 8001c76:	d0f9      	beq.n	8001c6c <_strtoul_l.constprop.0+0xc4>
 8001c78:	b106      	cbz	r6, 8001c7c <_strtoul_l.constprop.0+0xd4>
 8001c7a:	1e69      	subs	r1, r5, #1
 8001c7c:	6011      	str	r1, [r2, #0]
 8001c7e:	e7f5      	b.n	8001c6c <_strtoul_l.constprop.0+0xc4>
 8001c80:	08001da3 	.word	0x08001da3

08001c84 <_strtoul_r>:
 8001c84:	f7ff bf90 	b.w	8001ba8 <_strtoul_l.constprop.0>

08001c88 <_malloc_usable_size_r>:
 8001c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c8c:	1f18      	subs	r0, r3, #4
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	bfbc      	itt	lt
 8001c92:	580b      	ldrlt	r3, [r1, r0]
 8001c94:	18c0      	addlt	r0, r0, r3
 8001c96:	4770      	bx	lr

08001c98 <_init>:
 8001c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c9a:	bf00      	nop
 8001c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c9e:	bc08      	pop	{r3}
 8001ca0:	469e      	mov	lr, r3
 8001ca2:	4770      	bx	lr

08001ca4 <_fini>:
 8001ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca6:	bf00      	nop
 8001ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001caa:	bc08      	pop	{r3}
 8001cac:	469e      	mov	lr, r3
 8001cae:	4770      	bx	lr
